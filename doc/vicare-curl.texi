\input texinfo.tex
@c %**start of header
@setfilename vicare-curl.info
@settitle cURL for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@macro curl{}
cURL
@end macro

@macro curlman{FUNC}
@xref{\FUNC\,\FUNC\,\FUNC\,*manpages*}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libcurl for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/cURL

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-curl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the @curl{} C
language library.

@curl{} is a tool to transfer data from or to a server, using one of the
supported protocols (@http{}, @acronym{HTTPS}, @ftp{}, @acronym{FTPS},
@acronym{TFTP}, @acronym{DICT}, @acronym{TELNET}, @acronym{LDAP} or
@acronym{FILE}).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}

@noindent
the @curl{} library is available at:

@center @url{http://curl.haxx.se/libcurl/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-curl: (vicare-curl). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @curl{} C language library.

@curl{} is a tool to transfer data from or to a server, using one of the
supported protocols (@http{}, @acronym{HTTPS}, @ftp{}, @acronym{FTPS},
@acronym{TFTP}, @acronym{DICT}, @acronym{TELNET}, @acronym{LDAP} or
@acronym{FILE}).

The last time the author bothered to update this paragraph, he had
tested @curl{} version 7.27.0; the @curl{} library is available at:

@center @url{http://curl.haxx.se/libcurl/}

The package installs a C language library implementing wrapper C
functions for the C language @curl{} library; on top of this, the Scheme
library @library{vicare net curl} exports one binding for each @curl{}
public function; additionally the library @library{vicare net curl
constants} exports one binding for each constant value defined in the C
language header @file{curl/curl.h}.

The following Scheme libraries are installed:

@table @library
@item vicare net curl
It exports one binding for each @curl{} public function.  All the Scheme
function names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{curl_global_init} becomes @func{curl-global-init}.

@item vicare net curl unsafe-capi
It exports one syntax binding for each @curl{} public function.  All the
Scheme syntax names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{curl-global-init} becomes @func{curl-global-init}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item vicare net curl constants
It exports one binding for each constant value defined in the C language
header @file{curl/curl.h}.

@item vicare net curl features
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.
@end table

After installation, under the directory @code{$libexecdir/$PACKAGE}, a
script @file{compile-all.sps} can be executed to precompile the
installed libraries; for example:

@example
$ sudo vicare \
   --fasl-directory /var/cache/vicare-scheme \
   --compile-dependencies \
      /usr/local/libexec/vicare-curl/compile-all.sps
@end example

This document contains only a brief description of the functions: refer
to the @curl{}'s documentation for details.

@c page
@node plain
@chapter Plain interface


@cindex @library{vicare net curl}, library
@cindex Library @library{vicare net curl}

@menu
* plain version::               @curl{} version informations.
* plain init::                  Global initialisation and
                                finalisation.
* plain misc::                  Miscellaneous functions.
@end menu

@c page
@node plain version
@section @curl{} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library @library{vicare net
curl}.


@defun vicare-curl-version-interface-current
@defunx vicare-curl-version-interface-revision
@defunx vicare-curl-version-interface-age
Return a fixnum representing a version number.
@end defun


@defun vicare-curl-version
Return a Scheme string representing the versio number.
@end defun


@defun curl-version
Return a string representing the version of @curl{};
@curlman{curl_version}.

@example
(import (vicare)
  (vicare net curl))

(curl-version)
@result{} "libcurl/7.27.0 OpenSSL/0.9.8n zlib/1.2.5 libidn/1.12"
@end example
@end defun


@deftp {Struct Type} curl-version-info-data
Data structure mirroring the C language type
@code{curl_version_info_data}.  It has the following fields:

@table @code
@item age
Exact integer, age of the returned struct.

@item version
An exact integer representing a @code{LIBCURL_VERSION} constant.

@item version-num
An exact integer representing the @code{LIBCURL_VERSION_NUM} constant.

@item host
@false{} or a stirng representing OS/host/cpu/machine when the package
was configured.

@item features
An exact integer representing a bitmask of @code{CURL_VERSION_}
constants.

@item ssl-version
@false{} or a human readable string.

@item ssl-version-num
Not used anymore, always @code{0}.

@item libz-version
@false{} or a human readable string.

@item protocols
A list of protocol strings.

@item ares
@false{} or a string.

@item ares-num
An exact integer.

@item libidn
@false{} or a string.

@item iconv-ver-num
An exact integer, same as @code{_libiconv_version} if @curl{} was built
with @code{HAVE_ICONV}.

@item libssh-version
@false{} or a human readable string.
@end table
@end deftp


@defun curl-version-info-data? @var{obj}
Return @true{} if @var{obj} is an instance of
@code{curl-version-info-data}.
@end defun


@defun curl-version-info-data-age @var{info}
@defunx curl-version-info-data-version @var{info}
@defunx curl-version-info-data-version-num @var{info}
@defunx curl-version-info-data-host @var{info}
@defunx curl-version-info-data-features @var{info}
@defunx curl-version-info-data-ssl-version @var{info}
@defunx curl-version-info-data-ssl-version-num @var{info}
@defunx curl-version-info-data-libz-version @var{info}
@defunx curl-version-info-data-protocols @var{info}
@defunx curl-version-info-data-ares @var{info}
@defunx curl-version-info-data-ares-num @var{info}
@defunx curl-version-info-data-libidn @var{info}
@defunx curl-version-info-data-iconv-ver-num @var{info}
@defunx curl-version-info-data-libssh-version @var{info}
Accessors for the fields of @code{curl-version-info-data} instances.
@end defun


@defun curl-version-info @var{version-code}
Return an instance of @code{curl-version-info-data} representing the
version number of the features with which @curl{} was built.
@curlman{curl_version_info}.


@var{version-code} must be a non--negative fixnum representing one of
the @code{CURLVERSION_} constants, with @code{CURLVERSION_NOW}
representing the current version.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-info CURLVERSION_NOW)
@result{} #[curl-version-info-data
   age=3
   version="7.27.0"
   version-num=465664
   host="i686-pc-linux-gnu"
   features=(CURL_VERSION_NTLM_WB
             CURL_VERSION_IDN
             CURL_VERSION_LARGEFILE
             CURL_VERSION_NTLM
             CURL_VERSION_LIBZ
             CURL_VERSION_SSL
             CURL_VERSION_IPV6)
   ssl-version="OpenSSL/0.9.8n"
   ssl-version-num=0
   libz-version="1.2.5"
   protocols=("tftp"    "telnet"   "smtps"
              "smtp"    "rtsp"     "pop3s"
              "pop3"    "ldaps"    "ldap"
              "imaps"   "imap"     "https"
              "http"    "gopher"   "ftps"
              "ftp"     "file"     "dict")
   ares=#f
   ares-num=0
   libidn="1.12"
   iconv-ver-num=0
   libssh-version=#f]
@end example
@end defun


@defun curl-version-info-features->symbols @var{info}
Given an instance of @code{curl-version-info-data}, extract the
@code{features} field and convert it into a list of symbols representing
the @code{CURL_VERSION_} constants.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-info-features->symbols
   (curl-version-info CURLVERSION_NOW))
@result{} (CURL_VERSION_NTLM_WB
    CURL_VERSION_IDN
    CURL_VERSION_LARGEFILE
    CURL_VERSION_NTLM
    CURL_VERSION_LIBZ
    CURL_VERSION_SSL
    CURL_VERSION_IPV6)
@end example
@end defun


@defun curl-version-feature? @var{info} @var{feature}
Given an instance of @code{curl-version-info-data}, extract the
@code{features} field and bitwise AND it @var{feature}, which must be an
exact integer representing a @code{CURL_VERSION_} constant; return
@true{} if the @var{feature} bit is set.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-feature? (curl-version-info CURLVERSION_NOW)
                       CURL_VERSION_LIBZ)
@result{} #t
@end example
@end defun

@c page
@node plain init
@section Global initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-global-init @var{flags}
Perform global initialisation for the @curl{} library; if successful
return @code{CURLE_OK}, else return a @code{CURLE_} error code.
@curlman{curl_global_init}.

@var{flags} must be an exact integer representing @code{CURL_GLOBAL_ALL}
or the bitwise inclusive OR combination of: @code{CURL_GLOBAL_SSL},
@code{CURL_GLOBAL_WIN32}, @code{CURL_GLOBAL_NOTHING}.
@end defun


@defun curl-global-init-mem @var{flags} @var{malloc} @var{free} @var{realloc} @var{strdup} @var{calloc}
Like @func{curl-global-init}, but allows the application to replace the
functions used by @curl{} to manage raw memory with supplied callbacks.
@end defun


@defun make-curl-malloc-callback @var{malloc}
@defunx make-curl-free-callback @var{free}
@defunx make-curl-realloc-callback @var{realloc}
@defunx make-curl-strdup-callback @var{strdup}
@defunx make-curl-calloc-callback @var{calloc}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as argument in calls
to @func{curl-global-init-mem}; the returned pointer must be released
with a call to @func{free-c-callback} from @library{vicare ffi}.

Each supplid Scheme function must adhere to appropriate prototype among
the following:

@example
void * curl_malloc_callback  (size_t size);
void   curl_free_callback    (void *ptr);
void * curl_realloc_callback (void *ptr, size_t size);
char * curl_strdup_callback  (const char *str);
void * curl_calloc_callback  (size_t nmemb, size_t size);
@end example

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{malloc}, @var{realloc}, @var{calloc} or @var{strdup} raise an
exception: the raised object is discarded and the callback returns the
return value of @func{null-pointer}.

@item
If @var{free} raises an exception: the raised object is discarded and
the callback returns the return value of @func{void}.
@end itemize
@end defun


@defun curl-global-cleanup
Releases the resources allocated by @func{curl-global-init} or
@func{curl-global-init-mem}; return unspecified values.
@curlman{curl-global-cleanup}.
@end defun


The following is a meaningless example of selecting custom functions to
handle raw memory allocation:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.))

(curl-global-init-mem CURL_GLOBAL_ALL
   (make-curl-malloc-callback  malloc)
   (make-curl-free-callback    free)
   (make-curl-realloc-callback realloc)
   (make-curl-strdup-callback  strdup)
   (make-curl-calloc-callback  calloc))
@result{} CURLE_OK
@end example

@c page
@node plain misc
@section Miscellaneous functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-free @var{pointer}
Release memory allocated through a call to the @curl{} library; return
unspecified values.  @curlman{curl_free}.

@var{pointer} must be @false{} or a pointer object; when @var{pointer}
is neither @false{} nor @cnull{}: @var{pointer} is mutated to represent
the @cnull{} pointer.

It is safe to apply this function multiple times to the same
@var{pointer}.
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @url{http://marcomaggi.github.com/docs/vicare-curl.html}

@noindent
the latest version of this package can be downloaded from:

@center @url{http://github.com/marcomaggi/vicare-curl/downloads}

@noindent
development takes place at:

@center @url{http://github.com/marcomaggi/vicare-curl/}

@noindent
the home page of the Vicare project is at:

@center @url{http://marcomaggi.github.com/vicare.html}

@noindent
the home page of the Nausicaa project is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
Curl can be found here:

@center @url{http://curl.sourceforge.net/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

