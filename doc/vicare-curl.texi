\input texinfo.tex
@c %**start of header
@setfilename vicare-curl.info
@settitle cURL for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libcurl for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/cURL

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-curl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012, 2013, 2015

@c ------------------------------------------------------------

@set FOREIGN_PACKAGE            Libcurl
@set FOREIGN_VERSION            7.42.1
@set FOREIGN_URL                @url{http:/@//@/curl.haxx.se/@/libcurl/@/}
@set FOREIGN_SCHEME_LIB         @library{vicare net curl}
@set GITHUB_URL                 @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}
@set BITBUCKET_URL              @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}}
@set DOWNLOAD_URL               @url{https://bitbucket.org/marcomaggi/@value{PACKAGE_NICKNAME}/downloads}
@set DOCUMENTATION_URL          @url{http://marcomaggi.github.io/docs/@value{PACKAGE_NICKNAME}.html}
@set VICARE_HOMEPAGE_URL        @url{http://marcomaggi.github.io/vicare.html}

@macro curl{}
cURL
@end macro

@macro curlman{FUNC}
@xref{\FUNC\,\FUNC\,\FUNC\,*manpages*}
@end macro

@macro curlref{FUNC,REF}
@xref{\FUNC\,\REF\,\FUNC\,*manpages*}
@end macro

@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the
@value{FOREIGN_PACKAGE} C language library.

@curl{} is a tool to transfer data from or to a server, using one of the
supported protocols (@http{}, @acronym{HTTPS}, @ftp{}, @acronym{FTPS},
@acronym{TFTP}, @acronym{DICT}, @acronym{TELNET}, @acronym{LDAP} or
@acronym{FILE}).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
@value{FOREIGN_PACKAGE} is available at:

@center @value{FOREIGN_URL}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-curl: (vicare-curl). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @value{FOREIGN_PACKAGE} C language library.

@curl{} is a tool to transfer data from or to a server, using one of the
supported protocols (@http{}, @acronym{HTTPS}, @ftp{}, @acronym{FTPS},
@acronym{TFTP}, @acronym{DICT}, @acronym{TELNET}, @acronym{LDAP} or
@acronym{FILE}).

The last time the author bothered to update this paragraph, he had
tested @value{FOREIGN_PACKAGE} version @value{FOREIGN_VERSION}; the
@value{FOREIGN_PACKAGE} library is available at:

@center @value{FOREIGN_URL}

The package installs a C language library implementing wrapper C
functions for the C language @value{FOREIGN_PACKAGE} library; on top of
this, the Scheme library @library{vicare net curl} exports one binding
for each @value{FOREIGN_PACKAGE} public function; additionally the
library @library{vicare net curl constants} exports one binding for each
constant value defined in the C language header @file{curl/curl.h}.

The following Scheme libraries are installed:

@table @library
@item vicare net curl
It exports one binding for each @curl{} public function.  All the Scheme
function names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{curl_global_init} becomes @func{curl-global-init}.

@item vicare net curl unsafe-capi
@cindex @library{vicare net curl unsafe-api}, library
@cindex Library @library{vicare net curl unsafe-api}
It exports one syntax binding for each @curl{} public function.  All the
Scheme syntax names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{curl_global_init} becomes @func{curl-global-init}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item vicare net curl constants
@cindex @library{vicare net curl constants}, library
@cindex Library @library{vicare net curl constants}
It exports one binding for each constant value defined in the C language
headers @file{curl/curl.h}.

@item vicare net curl features
@cindex @library{vicare net curl features}, library
@cindex Library @library{vicare net curl features}
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.
@end table

This document contains only a brief description of the functions: refer
to the @value{FOREIGN_PACKAGE}'s documentation for details.

@c page
@node plain
@chapter Plain interface


@cindex @library{vicare net curl}, library
@cindex Library @library{vicare net curl}

@menu
* plain version::               @curl{} version informations.
* plain init::                  Global initialisation and
                                finalisation.
* plain easy::                  Easy operations.
* plain multi::                 Multi operations.
* plain callbacks::             Callback makers.
* plain slists::                String lists.
* plain forms::                 Multipart/formdata composition.
* plain shares::                Shared configuration option sets.
* plain cstructs::              Accessing C language data structures.
* plain misc::                  Miscellaneous functions.
* plain symbols::               Constant to symbol conversions.
@end menu

@c page
@node plain version
@section @curl{} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library
@value{FOREIGN_SCHEME_LIB}.


@defun vicare-curl-version-interface-current
@defunx vicare-curl-version-interface-revision
@defunx vicare-curl-version-interface-age
Return a fixnum representing a version number.
@end defun


@defun vicare-curl-version
Return a Scheme string representing the version number.
@end defun


@defun curl-version
Return a string representing the version of @curl{};
@curlman{curl_version}.

@example
(import (vicare)
  (vicare net curl))

(curl-version)
@result{} "libcurl/7.27.0 OpenSSL/0.9.8n zlib/1.2.5 libidn/1.12"
@end example
@end defun


@deftp {Struct Type} curl-version-info-data
Data structure mirroring the C language type
@code{curl_version_info_data}.  It has the following fields:

@table @code
@item age
Exact integer, age of the returned struct.

@item version
An exact integer representing a @code{LIBCURL_VERSION} constant.

@item version-num
An exact integer representing the @code{LIBCURL_VERSION_NUM} constant.

@item host
@false{} or a string representing OS/host/cpu/machine when the package
was configured.

@item features
An exact integer representing a bitmask of @code{CURL_VERSION_}
constants.

@item ssl-version
@false{} or a human readable string.

@item ssl-version-num
Not used anymore, always @code{0}.

@item libz-version
@false{} or a human readable string.

@item protocols
A list of protocol strings.

@item ares
@false{} or a string.

@item ares-num
An exact integer.

@item libidn
@false{} or a string.

@item iconv-ver-num
An exact integer, same as @code{_libiconv_version} if @curl{} was built
with @code{HAVE_ICONV}.

@item libssh-version
@false{} or a human readable string.
@end table
@end deftp


@defun curl-version-info-data? @var{obj}
Return @true{} if @var{obj} is an instance of
@code{curl-version-info-data}.
@end defun


@defun curl-version-info-data-age @var{info}
@defunx curl-version-info-data-version @var{info}
@defunx curl-version-info-data-version-num @var{info}
@defunx curl-version-info-data-host @var{info}
@defunx curl-version-info-data-features @var{info}
@defunx curl-version-info-data-ssl-version @var{info}
@defunx curl-version-info-data-ssl-version-num @var{info}
@defunx curl-version-info-data-libz-version @var{info}
@defunx curl-version-info-data-protocols @var{info}
@defunx curl-version-info-data-ares @var{info}
@defunx curl-version-info-data-ares-num @var{info}
@defunx curl-version-info-data-libidn @var{info}
@defunx curl-version-info-data-iconv-ver-num @var{info}
@defunx curl-version-info-data-libssh-version @var{info}
Accessors for the fields of @code{curl-version-info-data} instances.
@end defun


@defun curl-version-info @var{version-code}
Return an instance of @code{curl-version-info-data} representing the
version number of the features with which @curl{} was built.
@curlman{curl_version_info}.


@var{version-code} must be a non--negative fixnum representing one of
the @code{CURLVERSION_} constants, with @code{CURLVERSION_NOW}
representing the current version.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-info CURLVERSION_NOW)
@result{} #[curl-version-info-data
   age=3
   version="7.27.0"
   version-num=465664
   host="i686-pc-linux-gnu"
   features=(CURL_VERSION_NTLM_WB
             CURL_VERSION_IDN
             CURL_VERSION_LARGEFILE
             CURL_VERSION_NTLM
             CURL_VERSION_LIBZ
             CURL_VERSION_SSL
             CURL_VERSION_IPV6)
   ssl-version="OpenSSL/0.9.8n"
   ssl-version-num=0
   libz-version="1.2.5"
   protocols=("tftp"    "telnet"   "smtps"
              "smtp"    "rtsp"     "pop3s"
              "pop3"    "ldaps"    "ldap"
              "imaps"   "imap"     "https"
              "http"    "gopher"   "ftps"
              "ftp"     "file"     "dict")
   ares=#f
   ares-num=0
   libidn="1.12"
   iconv-ver-num=0
   libssh-version=#f]
@end example
@end defun


@defun curl-version-info-features->symbols @var{info}
Given an instance of @code{curl-version-info-data}, extract the
@code{features} field and convert it into a list of symbols representing
the @code{CURL_VERSION_} constants.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-info-features->symbols
   (curl-version-info CURLVERSION_NOW))
@result{} (CURL_VERSION_NTLM_WB
    CURL_VERSION_IDN
    CURL_VERSION_LARGEFILE
    CURL_VERSION_NTLM
    CURL_VERSION_LIBZ
    CURL_VERSION_SSL
    CURL_VERSION_IPV6)
@end example
@end defun


@defun curl-version-feature? @var{info} @var{feature}
Given an instance of @code{curl-version-info-data}, extract the
@code{features} field and bitwise AND the value @var{feature} to it;
@var{feature} must be an exact integer representing a
@code{CURL_VERSION_} constant; return @true{} if the @var{feature} bit
is set.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-feature? (curl-version-info CURLVERSION_NOW)
                       CURL_VERSION_LIBZ)
@result{} #t
@end example
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-version-info-data @var{obj}
@deffnx {Validation Clause} false-or-curl-version-info-data @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-version-info-data?}; the second
clause also accepts @false{}.
@end deffn

@c page
@node plain init
@section Global initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-global-init @var{flags}
Perform global initialisation for the @curl{} library; if successful
return @code{CURLE_OK}, else return a @code{CURLE_} error code.
@curlman{curl_global_init}.

@var{flags} must be an exact integer representing @code{CURL_GLOBAL_ALL}
or the bitwise inclusive OR combination of: @code{CURL_GLOBAL_SSL},
@code{CURL_GLOBAL_WIN32}, @code{CURL_GLOBAL_NOTHING}.
@end defun


@defun curl-global-init-mem @var{flags} @var{malloc} @var{free} @var{realloc} @var{strdup} @var{calloc}
Like @func{curl-global-init}, but allows the application to replace the
functions used by @curl{} to manage raw memory with supplied callbacks.
@curlman{curl_global_init_mem}.

@var{flags} has the same meaning of the argument to
@func{curl-global-init-mem}.  The other arguments must be pointer
objects referencing C language functions or @false{} when the callback
must be reset to @cnull{}.
@end defun


@defun make-curl-malloc-callback @var{malloc}
@defunx make-curl-free-callback @var{free}
@defunx make-curl-realloc-callback @var{realloc}
@defunx make-curl-strdup-callback @var{strdup}
@defunx make-curl-calloc-callback @var{calloc}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as argument in calls
to @func{curl-global-init-mem}; the returned pointer must be released
with a call to @func{free-c-callback} from @library{vicare ffi}.

Each supplied Scheme function must adhere to the appropriate prototype
among the following:

@example
void * curl_malloc_callback  (size_t size);
void   curl_free_callback    (void *ptr);
void * curl_realloc_callback (void *ptr, size_t size);
char * curl_strdup_callback  (const char *str);
void * curl_calloc_callback  (size_t nmemb, size_t size);
@end example

The supplied Scheme function is wrapped in an internally generated
Scheme function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; the supplied Scheme function should take care of
handling its own exceptions.

@item
If @var{malloc}, @var{realloc}, @var{calloc} or @var{strdup} raise an
exception: the raised object is discarded and the callback returns the
return value of @func{null-pointer}.

@item
If @var{free} raises an exception: the raised object is discarded and
the callback returns the return value of @func{void}.
@end itemize
@end defun


@defun curl-global-cleanup
Release the resources allocated by @func{curl-global-init} or
@func{curl-global-init-mem}; return unspecified values.
@curlman{curl_global_cleanup}.
@end defun


The following is a meaningless example of selecting custom functions to
handle raw memory allocation:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.))

(curl-global-init-mem CURL_GLOBAL_ALL
   (make-curl-malloc-callback  ffi.malloc)
   (make-curl-free-callback    ffi.free)
   (make-curl-realloc-callback ffi.realloc)
   (make-curl-strdup-callback  ffi.strdup)
   (make-curl-calloc-callback  ffi.calloc))
@result{} CURLE_OK
@end example

@c page
@node plain easy
@section Easy operations


@menu
* plain easy struct::           Easy operations handle.
* plain easy init::             Easy initialisation and finalisation.
* plain easy config::           Selecting options for easy operations.
* plain easy perform::          Performing easy operations.
* plain easy info::             Retrieving transfer informations.
* plain easy data::             Sending and receiving raw data.
* plain easy escape::           Escaping @aurl{} strings.
* plain easy misc::             Miscellaneous functions.
@end menu

@c page
@node plain easy struct
@subsection Easy operations handle


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-easy
@cindex Argument @var{easy}
@cindex @var{easy} argument
Opaque structure type referencing an instance of the C language type
@code{CURL}.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{easy}.

Instances of this type must be finalised with @func{curl-easy-cleanup};
whenever an instance of this type is garbage collected:
@func{curl-easy-cleanup} is automatically applied to it and any error
ignored.

In certain contexts, instances of this type own the referenced
@code{CURL} value, in other contexts they do not:

@itemize
@item
Finalising a @code{curl-easy} instance owning the @code{CURL} value,
causes finalisation of the @code{CURL} value too.

@item
Finalising a @code{curl-easy} instance @strong{not} owning the
@code{CURL} value, leaves the @code{CURL} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun curl-easy? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-easy};
otherwise return @false{}.
@end defun


@defun curl-easy?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-easy} and it
has not been finalised; return @false{} otherwise.
@end defun


@defun curl-easy-custom-destructor @var{easy}
@defunx set-curl-easy-custom-destructor! @var{easy} @var{func}
Retrieve or set a destructor function associated to @var{easy}.

Whenever @var{easy} is finalised, either explicitly with
@func{curl-easy-cleanup} or implicitly by the garbage collector,
@var{func} is applied to @var{easy} before the internal state of
@var{easy} is destroyed.

Notice that @var{func} can be used to associate some state to
@var{easy}, for example, by doing:

@example
(define easy ...)

(set-curl-easy-custom-destructor! easy
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((easy)
       (destroy state))
      (()
       state))))

(let ((state ((curl-easy-custom-destructor easy))))
  (do-something-with easy state))
@end example
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-easy @var{obj}
@deffnx {Validation Clause} false-or-curl-easy @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-easy?}; the
second clause also accepts @false{}.
@end deffn


@deffn {Validation Clause} curl-easy/alive @var{obj}
@deffnx {Validation Clause} false-or-curl-easy/alive @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-easy?/alive};
the second clause also accepts @false{}.
@end deffn

@c page
@node plain easy init
@subsection Easy initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-init
Build a new instance of @code{curl-easy} owning the referenced
@code{CURL} value; if successful return the new instance, else return
@false{}.  @curlman{curl_easy_init}.
@end defun


@defun curl-easy-cleanup @var{easy}
Finalise @var{easy}; return unspecified values.
@curlman{curl_easy_cleanup}.

It is fine to apply this function multiple times to the same @var{easy}
value: the first time the underlying session data is finalised, the
subsequent times nothing happens.

If this function is applied to an @var{easy} value not owning the
underlying @code{CURL} value: @var{easy} is finalised, but the
@code{CURL} value is left alone.
@end defun


@defun curl-easy-reset @var{easy}
Reinitialise all the options associated to @var{easy}; return
unspecified values.  @curlman{curl_easy_reset}.
@end defun

@c page
@node plain easy config
@subsection Selecting options for easy operations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-setopt @var{easy} @var{option} @var{parameter}
Set an option for the @var{easy} handle; if successful return
@code{CURLE_OK}, if @var{option} is invalid return @false{}, else return
a @code{CURLE_} error code.  @curlman{curl_easy_setopt}.

@var{option} must be an exact integer representing one of the
@code{CURLOPT_} constants.

The type of @var{parameter} depends upon the selected @var{option}
value; it can be one among:

@itemize
@item
An exact integer representing a C language type @code{long} or
@code{off_t}.  Whenever a @code{long} is expected: @true{} and @false{}
are also accepted and converted to @code{1} and @code{0}.

@item
A pointer object referencing a callback function.  When a callback
pointer is expected: @false{} is also accepted and converted to a
@cnull{} pointer.

@item
A generalised C string holding some data; Scheme strings are converted
to bytevectors using @func{string->utf8}.  @cstringsref{}.  For such
options @false{} is also accepted and converted to @cnull{}.

@item
When @var{option} is @code{CURLOPT_SHARE}: @var{parameter} must be an
instance of @code{curl-share}.
@end itemize
@end defun

@c page
@node plain easy perform
@subsection Performing easy operations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-perform @var{easy}
Perform a file transfer; if successful return @code{CURLE_OK}, else
return a @code{CURLE_} error code.  @curlman{curl_easy_perform}.
@end defun


@defun curl-easy-duphandle @var{easy}
Clone a session handle; if successful return a new instance of
@code{curl-easy}, else return @false{}.  @curlman{curl_easy_duphandle}.
@end defun


@defun curl-easy-pause @var{easy} @var{bitmask}
Pause and unpause a session; if successful return @code{CURLE_OK}, else
return a @code{CURLE_} error code.  @curlman{curl_easy_pause}.

@var{bitmask} must be the fixnum zero or the bitwise inclusive OR
combination of the @code{CURLPAUSE_} constants: @code{CURLPAUSE_RECV},
@code{CURLPAUSE_SEND}, @code{CURLPAUSE_ALL}, @code{CURLPAUSE_CONT}.
@end defun

@c page
@node plain easy info
@subsection Retrieving transfer informations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-getinfo @var{easy} @var{info}
Extract informations from an @var{easy} handle; return @math{2} values:

@itemize
@item
If successful: @code{CURLE_OK} and a value representing the requested
information.

@item
If @var{info} is not recognised: @false{} and @false{}.

@item
Else return: a @code{CURLE_} error constant and @false{}.
@end itemize

@curlman{curl_easy_getinfo}.

@var{info} must be one of the @code{CURLINFO_} constants and it drives
the type of the second returned value:

@itemize
@item
When the information type is an instance of the C language type
@code{long} or @code{double}: the returned value is an exact integer or
a flonum.

@item
When the information type is a C language string: the returned value is
@false{} or a Scheme string; @false{} is returned when no string is
available from @curl{}.

@item
When the information type is a @curl{} slist: the returned value is
@false{} or a list of Scheme strings; @false{} is returned if the list
is empty.

@item
As special cases when @var{info} is:

@table @code
@item CURLINFO_CERTINFO
The returned value is @false{} or a vector holding one item for each
@ssl{}/@tls{} certificate; each item is a list of strings representing
informations about the certificate; each string has the format
@code{name:value}.  @false{} is returned when no certificate
informations are available.

@item CURLINFO_PRIVATE
The returned value is @false{} or a pointer object referencing the data
previously registered in the easy handle with @func{curl-easy-setopt}
and @code{CURLOPT_PRIVATE}; @false{} is returned if the data is the
@cnull{} pointer.
@end table
@end itemize
@end defun


In the following example we discard the received data and just  print
the value of some options:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.)
  (vicare syntactic-extensions))

(define (dummy-write-cb buffer size nitems outstream)
  (* size nitems))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let ((easy     (curl-easy-init))
      (write-cb (make-curl-write-callback dummy-write-cb)))
  (unwind-protect
      (begin
        (curl-easy-setopt easy CURLOPT_URL
          "http://www.google.com/")

        ;;In a way or the other a WRITEFUNCTION is always
        ;;there; to discard data we have to register a
        ;;WRITEFUNCTION that does nothing!!!
        (curl-easy-setopt easy CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy CURLOPT_WRITEDATA #f)

        (assert (= CURLE_OK (curl-easy-perform easy)))

        (let-values
            (((code info)
              (curl-easy-getinfo easy CURLINFO_EFFECTIVE_URL)))
          (assert (= code CURLE_OK))
          (printf "Effective URL: ~a\n" info))

        (let-values
            (((code info)
              (curl-easy-getinfo easy CURLINFO_RESPONSE_CODE)))
          (assert (= code CURLE_OK))
          (printf "Response code: ~a\n" info))

        (let-values
            (((code info)
              (curl-easy-getinfo easy CURLINFO_TOTAL_TIME)))
          (assert (= code CURLE_OK))
          (printf "Total time: ~a\n" info))

        (flush-output-port (current-output-port)))

    ;;Close the connection before releasing the callbacks!!!
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)))
@print{} Effective URL: https://www.google.com/
@print{} Response code: 302
@print{} Total time: 0.392977
@end example

The following example discards the received data and just prints
certificate informations (which is shown with ellipses to make it
short):

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.)
  (vicare syntactic-extensions))

(define (dummy-write-cb buffer size nitems outstream)
  (* size nitems))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let ((easy     (curl-easy-init))
      (write-cb (make-curl-write-callback dummy-write-cb)))
  (unwind-protect
      (begin
        (curl-easy-setopt easy CURLOPT_URL "https://github.com/")

        ;;In a way or the other a WRITEFUNCTION is always
        ;;there; to discard data we have to register a
        ;;WRITEFUNCTION that does nothing!!!
        (curl-easy-setopt easy CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy CURLOPT_WRITEDATA #f)

        (curl-easy-setopt easy CURLOPT_CERTINFO #t)
        (assert (= CURLE_OK (curl-easy-perform easy)))

        (let-values
            (((code info)
              (curl-easy-getinfo easy CURLINFO_CERTINFO)))
          (assert (= code CURLE_OK))
          (printf "Number of certificates: ~a\n"
                  (vector-length info))
          (printf "First certificate data: \n")
          (pretty-print (vector-ref info 0)))

         (flush-output-port (current-output-port)))

    ;;Close the connection before releasing the callbacks!!!
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)))
@print{} Number of certificates: 2
@print{} First certificate data:
 ("Subject:businessCategory=Private ..."
  "Issuer:C=US; O=DigiCert Inc; ..."
  "Version:2"
  "Signature Algorithm:sha1WithRSAEncryption"
  "Start date:2011-05-27 00:00:00 GMT"
  "Expire date:2013-07-29 12:00:00 GMT"
  "Public Key Algorithm:rsaEncryption"
  "RSA Public Key:2048"
  "rsa(n):ed:d3:89:c3:5d:70:72:09:..."
  "rsa(e):01:00:01:"
  "X509v3 Authority Key Identifier:..."
  "X509v3 Subject Key Identifier:87:D1..."
  "X509v3 Subject Alternative Name:..."
  "Authority Information Access:OCSP-URI:..."
  "X509v3 Basic Constraints:CA:FALSE"
  "X509v3 CRL Distribution Points:URI:..."
  "X509v3 Certificate Policies:Policy:..."
  "X509v3 Extended Key Usage:..."
  "Netscape Cert Type:SSLClient,SSLServer"
  "X509v3 Key Usage:DigitalSignature,KeyEncipherment"
  "Signature:14:52:71:1f:86:9d:6d:35:3e:..."
  "Cert:-----BEGIN CERTIFICATE-----\nMIIHKjC...")
@end example

@c page
@node plain easy data
@subsection Sending and receiving raw data


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-recv @var{easy} @var{buffer.data}
@defunx curl-easy-recv @var{easy} @var{buffer.data} @var{buffer.len}
Receive raw data from an @var{easy} handle; return @math{2} values:

@itemize
@item
If successful @code{CURLE_OK} and an exact integer representing the
number of bytes received in the output buffer.

@item
Else a @code{CURLE_} error code and @false{}.
@end itemize

@curlman{curl_easy_recv}.

@var{buffer.data} and @var{buffer.len} must represent a generalised C
buffer, @cbuffersref{}.  Received data is written in such buffer.
@end defun


@defun curl-easy-send @var{easy} @var{buffer.data}
@defunx curl-easy-send @var{easy} @var{buffer.data} @var{buffer.len}
Send raw data to an @var{easy} handle; return @math{2} values:

@itemize
@item
If successful @code{CURLE_OK} and an exact integer representing the
number of bytes sent from the input buffer.

@item
Else a @code{CURLE_} error code and @false{}.
@end itemize

@curlman{curl_easy_send}.

@var{buffer.data} and @var{buffer.len} must represent a generalised C
string, @cstringsref{}.  When @var{buffer.data} is a Scheme string: it
is converted to a bytevector with @code{string->utf8}.  It is the input
buffer from which sent data will be read.
@end defun

@c page
@node plain easy escape
@subsection Escaping @aurl{} strings


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-escape @var{easy} @var{chars.data}
@defunx curl-easy-escape @var{easy} @var{chars.data} @var{chars.len}
Encode the given string to become a portion of @aurl{}; if successful
return an @ascii{} bytevector, else return @false{}.
@curlman{curl_easy_escape}.

@var{chars.data} and @var{chars.len} must represent a generalised C
string, @cstringsref{}.  It must hold the input data.
@end defun


@defun curl-easy-escape/string @var{easy} @var{chars.data}
@defunx curl-easy-escape/string @var{easy} @var{chars.data} @var{chars.len}
Like @func{curl-easy-escape}, but return a string.
@end defun


@defun curl-easy-unescape @var{easy} @var{chars.data}
@defunx curl-easy-unescape @var{easy} @var{chars.data} @var{chars.len}
Decode the given string as if it comes from a portion of @aurl{}; if
successful return an @ascii{} bytevector, else return @false{}.
@curlman{curl_easy_unescape}.

@var{chars.data} and @var{chars.len} must represent a generalised C
string, @cstringsref{}.  It must hold the input data.
@end defun


@defun curl-easy-unescape/string @var{easy} @var{chars.data}
@defunx curl-easy-unescape/string @var{easy} @var{chars.data} @var{chars.len}
Like @func{curl-easy-unescape}, but return a string.
@end defun

@c page
@node plain easy misc
@subsection Miscellaneous functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-strerror @var{code}
Return a string representing the description of the given @code{CURLE_}
error code; if @var{code} is invalid, return @false{}.
@curlman{curl_easy_strerror}.
@end defun

@c page
@node plain multi
@section Multi operations


@menu
* plain multi examples::        Some simple usage examples.
* plain multi struct::          Multi operations handle.
* plain multi init::            Multi initialisation and finalisation.
* plain multi easy::            Adding and removing easy handles.
* plain multi config::          Selecting options for multi operations.
* plain multi perform::         Performing multi operations.
* plain multi sockets::         Performing multi operations with
                                socket descriptors.
* plain multi misc::            Miscellaneous functions for multi
                                handles.
@end menu

@c page
@node plain multi examples
@subsection Some simple usage examples


The following example downloads the page at @url{http://google.com/}
using @func{curl-multi-perform}, @func{curl-multi-fdset} and
@func{curl-multi-timeout}:

@smallexample
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.)
  (prefix (vicare posix) px.)
  (vicare syntactic-extensions))

(define-inline (%pretty-print ?thing)
  (pretty-print ?thing (current-error-port)))

(define (write-func buffer size nitems outstream)
  (let ((nbytes (* size nitems)))
    (guard (E (else (pretty-print E) nbytes))
      (fprintf (current-error-port) "Google's Home page:\n~a\n"
               (utf8->string (cstring->bytevector buffer nbytes))))
    nbytes))

(define (%curl-multi-perform multi)
  (let loop ()
    (let-values (((code still-running)
                  (curl-multi-perform multi)))
      (if (= code CURLM_CALL_MULTI_PERFORM)
          (loop)
        (values code still-running)))))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let ((multi    (curl-multi-init))
      (easy     (curl-easy-init))
      (rfdset   (px.make-fd-set-pointer))
      (wfdset   (px.make-fd-set-pointer))
      (write-cb (make-curl-write-callback write-func)))
  (unwind-protect
      (begin
        (curl-easy-setopt easy CURLOPT_URL "http://google.com/")
        (curl-easy-setopt easy CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy CURLOPT_WRITEDATA #f)
        (curl-multi-add-handle multi easy)
        (let loop ()
          (let-values (((code still-running)
                        (%curl-multi-perform multi)))
            (unless (zero? still-running)
              (let-values (((code milliseconds)
                            (curl-multi-timeout multi)))
                (when (and (= code CURLM_OK)
                           (<= 0 milliseconds))
                  (px.FD_ZERO rfdset)
                  (px.FD_ZERO wfdset)
                  (let-values (((code max-fd)
                                (curl-multi-fdset multi
                                  rfdset wfdset #f))
                               ((secs nsecs)
                                (div-and-mod milliseconds 1000)))
                    (when (= code CURLM_OK)
                      (px.select-from-sets (+ 1 max-fd)
                        rfdset wfdset #f secs nsecs)
                      (loop))))))))
        (let-values (((msg nmsgs)
                      (curl-multi-info-read multi)))
          (when msg
            (%pretty-print
              (curl-constant-msg->symbol (curl-msg.msg msg))))))
    ;;Close handles before releasing the callbacks!!!
    (curl-multi-cleanup multi)
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)
    (free rfdset)
    (free wfdset)))
@end smallexample

The following example downloads the page at @url{http://google.com/}
using @func{curl-multi-perform}, @func{curl-multi-fdset} and the multi
timer callback:

@smallexample
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.)
  (prefix (vicare posix) px.)
  (vicare syntactic-extensions))

(define-inline (%pretty-print ?thing)
  (pretty-print ?thing (current-error-port)))

(define (write-func buffer size nitems outstream)
  (let ((nbytes (* size nitems)))
    (guard (E (else (pretty-print E) nbytes))
      (fprintf (current-error-port) "Google's Home page:\n~a\n"
               (utf8->string (cstring->bytevector buffer nbytes))))
    nbytes))

(define (%curl-multi-perform multi)
  (let loop ()
    (let-values (((code still-running)
                  (curl-multi-perform multi)))
      (if (= code CURLM_CALL_MULTI_PERFORM)
          (loop)
        (values code still-running)))))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let* ((multi           (curl-multi-init))
       (easy            (curl-easy-init))
       (milliseconds    -1)
       (rfdset          (px.make-fd-set-pointer))
       (wfdset          (px.make-fd-set-pointer))
       (write-cb        (make-curl-write-callback write-func))
       (timer-cb        (make-curl-multi-timer-callback
                         (lambda (multi ms custom-data)
                           (set! milliseconds ms)
                           0))))
  (unwind-protect
      (begin
        (curl-easy-setopt easy CURLOPT_URL "http://google.com/")
        (curl-easy-setopt easy CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy CURLOPT_WRITEDATA     #f)
        (curl-multi-setopt multi CURLMOPT_TIMERFUNCTION timer-cb)
        (curl-multi-setopt multi CURLMOPT_TIMERDATA     #f)
        (curl-multi-add-handle multi easy)
        (let loop ()
          (let-values (((code still-running)
                        (%curl-multi-perform multi)))
            (when (and (not (zero? still-running))
                       (<= 0 milliseconds))
              (px.FD_ZERO rfdset)
              (px.FD_ZERO wfdset)
              (let-values (((code max-fd)
                            (curl-multi-fdset multi
                              rfdset wfdset #f))
                           ((secs nsecs)
                            (div-and-mod milliseconds 1000)))
                (when (= code CURLM_OK)
                  (px.select-from-sets (+ 1 max-fd)
                    rfdset wfdset #f secs nsecs)
                  (loop))))))
        (let-values (((msg nmsgs)
                      (curl-multi-info-read multi)))
          (when msg
            (%pretty-print
              (curl-constant-msg->symbol (curl-msg.msg msg)))))
        #t)
    ;;Close handles before releasing the callbacks!!!
    (curl-multi-cleanup multi)
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)
    (ffi.free-c-callback timer-cb)
    (free rfdset)
    (free wfdset)))
@end smallexample

The following example downloads the page at @url{http://google.com/}
using @func{curl-multi-socket-action}, the multi socket callback and the
multi timer callback:

@smallexample
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.)
  (prefix (vicare posix) px.)
  (vicare syntactic-extensions))

(define-struct pending-socks
  (rd-requests
              ;Null or a list of socket descriptors
              ;for which reading is requested.
   wr-requests
              ;Null or a list of socket descriptors
              ;for which writing is requested.
   rw-requests
              ;Null or a list of socket descriptors
              ;for which reading or writing is requested.
   ))

(define (%make-pending-socks)
  (make-pending-socks '() '() '()))

(define (pending-socks-remove! ps sock-fd)
  (pending-socks-remove-from-rd-requests! ps sock-fd)
  (pending-socks-remove-from-wr-requests! ps sock-fd)
  (pending-socks-remove-from-rw-requests! ps sock-fd))

(define (pending-socks-remove-from-rd-requests! ps sock-fd)
  (set-pending-socks-rd-requests! ps
    (remq sock-fd (pending-socks-rd-requests ps))))

(define (pending-socks-remove-from-wr-requests! ps sock-fd)
  (set-pending-socks-wr-requests! ps
    (remq sock-fd (pending-socks-wr-requests ps))))

(define (pending-socks-remove-from-rw-requests! ps sock-fd)
  (set-pending-socks-rw-requests! ps
    (remq sock-fd (pending-socks-rw-requests ps))))

(define (pending-socks-rd-request! ps sock-fd)
  (set-pending-socks-rd-requests! ps
    (cons sock-fd (pending-socks-rd-requests ps))))

(define (pending-socks-wr-request! ps sock-fd)
  (set-pending-socks-wr-requests! ps
    (cons sock-fd (pending-socks-wr-requests ps))))

(define (pending-socks-rw-request! ps sock-fd)
  (set-pending-socks-rw-requests!
   ps (cons sock-fd (pending-socks-rw-requests ps))))

(define (%curl-multi-socket-action multi sock-fd events)
  (let loop ()
    (let-values
        (((code still-running)
          (curl-multi-socket-action multi sock-fd events)))
      (if (= code CURLM_CALL_MULTI_PERFORM)
          (loop)
        (values code still-running)))))

(define (write-func buffer size nitems outstream)
  (let ((nbytes (* size nitems)))
    (guard (E (else (pretty-print E) nbytes))
      (fprintf (current-error-port) "Google's Home page:\n~a\n"
               (cstring->string buffer nbytes)))
    nbytes))

(define (socket-func easy sock-fd poll-type
                     callback-data sock-fd-data)
  (define ps
    (retrieve-to-avoid-collecting callback-data))
  (case-integers poll-type
    ((CURL_POLL_NONE)
     (void))
    ((CURL_POLL_IN)
     (pending-socks-rd-request! ps sock-fd))
    ((CURL_POLL_OUT)
     (pending-socks-wr-request! ps sock-fd))
    ((CURL_POLL_INOUT)
     (pending-socks-rw-request! ps sock-fd))
    ((CURL_POLL_REMOVE)
     (pending-socks-remove! ps sock-fd))))

(define (timer-func multi milliseconds timeout-pointer)
  (replace-to-avoid-collecting timeout-pointer milliseconds)
  0)

(module (%select)
  (define (%select rd-requests wr-requests rw-requests
                   milliseconds)
    ;;Perform a SELECT call for the requested sockets;
    ;;use the given milliseconds as timeout.  Return
    ;;two values: null or a list of socket descriptors
    ;;ready for reading; null or a list of socket
    ;;descriptors ready for writing.
    ;;
    (let ((fdsets (px.make-fd-set-bytevector 3)))
      (%set-requests rd-requests fdsets 0)
      (%set-requests wr-requests fdsets 1)
      (%set-requests rw-requests fdsets 0)
      (%set-requests rw-requests fdsets 1)
      (cond ((let-values (((secs nsecs)
                           (div-and-mod milliseconds 1000)))
               (px.select-from-sets-array FD_SETSIZE
                  fdsets secs nsecs))
             => (lambda (fdsets)
                  (values (%filter-ready
                            (append rd-requests rw-requests)
                            fdsets 0)
                          (%filter-ready
                            (append wr-requests rw-requests)
                            fdsets 1))))
            (else ;expired timeout
             (values '() '())))))

  (define (%filter-ready requests fdsets idx)
    ;;Filter from REQUESTS the socket descriptors
    ;;which are ready in FDSETS at fd_set index IDX;
    ;;return the list of ready sockets.
    ;;
    (let loop ((ready    '())
               (requests requests))
      (if (null? requests)
          ready
        (let ((sock-fd (car requests)))
          (if (px.FD_ISSET sock-fd fdsets idx)
              (loop (cons sock-fd ready) (cdr requests))
            (loop ready (cdr requests)))))))

  (define (%set-requests requests fdsets idx)
    ;;Set the socket descriptors from REQUESTS in
    ;;FDSETS and fd_set index IDX; return unspecified
    ;;values.
    ;;
    (for-each (lambda (sock-fd)
                (px.FD_SET sock-fd fdsets idx))
      requests))

  #| end of module |# )

(define-inline (%pretty-print ?thing)
  (pretty-print ?thing (current-error-port)))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let* ((multi     (curl-multi-init))
       (easy      (curl-easy-init))
       (write-cb  (make-curl-write-callback write-func))
       (socket-cb (make-curl-socket-callback socket-func))
       (timer-cb  (make-curl-multi-timer-callback timer-func))
       (timeout-pointer
        (register-to-avoid-collecting -1))
       (pending-socks
        (%make-pending-socks))
       (pending-socks-pointer
        (register-to-avoid-collecting pending-socks)))
  (unwind-protect
      (begin
        (curl-easy-setopt easy
          CURLOPT_URL "http://google.com/")
        (curl-easy-setopt easy
          CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy
          CURLOPT_WRITEDATA #f)
        (curl-multi-setopt multi
          CURLMOPT_TIMERFUNCTION timer-cb)
        (curl-multi-setopt multi
          CURLMOPT_TIMERDATA timeout-pointer)
        (curl-multi-setopt multi
          CURLMOPT_SOCKETFUNCTION socket-cb)
        (curl-multi-setopt multi
          CURLMOPT_SOCKETDATA pending-socks-pointer)
        (curl-multi-add-handle multi easy)
        (let loop ()
          (let-values
              (((code still-running)
                (%curl-multi-socket-action multi
                  CURL_SOCKET_TIMEOUT 0)))
            (when (and (= code CURLM_OK)
                       (not (zero? still-running)))
              (let-values
                  (((read-ready write-ready)
                    (%select
                      (pending-socks-rd-requests pending-socks)
                      (pending-socks-wr-requests pending-socks)
                      (pending-socks-rw-requests pending-socks)
                      (retrieve-to-avoid-collecting timeout-pointer))))
                (for-each
                    (lambda (sock-fd)
                      (%curl-multi-socket-action multi
                        sock-fd CURL_CSELECT_IN))
                  read-ready)
                (for-each
                    (lambda (sock-fd)
                      (%curl-multi-socket-action multi
                        sock-fd CURL_CSELECT_OUT))
                  write-ready)
                (loop)))))
        (let-values (((msg nmsgs)
                      (curl-multi-info-read multi)))
          (when msg
            (%pretty-print
             (curl-constant-msg->symbol (curl-msg.msg msg))))))
    ;;Close handles before releasing the callbacks!!!
    (curl-multi-cleanup multi)
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)
    (ffi.free-c-callback timer-cb)
    (forget-to-avoid-collecting pending-socks-pointer)))
@end smallexample

@c page
@node plain multi struct
@subsection Multi operations handle


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-multi
@cindex Argument @var{multi}
@cindex @var{multi} argument
Opaque structure type referencing an instance of the C language type
@code{CURLM}.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{multi}.

Instances of this type must be finalised with @func{curl-multi-cleanup};
whenever an instance of this type is garbage collected:
@func{curl-multi-cleanup} is automatically applied to it and any error
ignored.  Before the finalisation takes place: all the easy handles are
removed from the context of @var{multi}.

In certain contexts, instances of this type own the referenced
@code{CURLM} value, in other contexts they do not:

@itemize
@item
Finalising a @code{curl-multi} instance owning the @code{CURLM} value,
causes finalisation of the @code{CURLM} value too.

@item
Finalising a @code{curl-multi} instance @strong{not} owning the
@code{CURLM} value, leaves the @code{CURLM} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun curl-multi? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-multi};
otherwise return @false{}.
@end defun


@defun curl-multi?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-multi} and it
has not been finalised; otherwise return @false{}.
@end defun


@defun curl-multi-custom-destructor @var{multi}
@defunx set-curl-multi-custom-destructor! @var{multi} @var{func}
Retrieve or set a destructor function associated to @var{multi}.

Whenever @var{multi} is finalised, either explicitly with
@func{curl-multi-cleanup} or implicitly by the garbage collector,
@var{func} is applied to @var{multi} before the internal state of
@var{multi} is destroyed.

Notice that @var{func} can be used to associate some state to
@var{multi}, for example, by doing:

@example
(define multi ...)

(set-curl-multi-custom-destructor! multi
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((multi)
       (destroy state))
      (()
       state))))

(let ((state ((curl-multi-custom-destructor multi))))
  (do-something-with multi state))
@end example
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-multi @var{obj}
@deffnx {Validation Clause} false-or-curl-multi @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-multi?}; the
second clause also accepts @false{}.
@end deffn


@deffn {Validation Clause} curl-multi/alive @var{obj}
@deffnx {Validation Clause} false-or-curl-multi/alive @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-multi?/alive};
the second clause also accepts @false{}.
@end deffn

@c page
@node plain multi init
@subsection Multi initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-init
Build and return a new instance of @code{curl-multi}.
@curlman{curl_multi_init}.
@end defun


@defun curl-multi-cleanup @var{multi}
Finalise an instance of @code{curl-multi}.  If the finalisation happens
and it is successful: return @code{CURLM_OK}; if the finalisation
happens and it fails: return a @code{CURLM_} error code; if @var{multi}
was already finalised: return @false{}.  @curlman{curl_multi_cleanup}.

It is fine to apply this function multiple times to the same @var{multi}
value: the first time the underlying session data is finalised, the
subsequent times nothing happens.

If this function is applied to a @var{multi} value not owning the
underlying @code{CURLM} value: @var{multi} is finalised, but the
@code{CURLM} value is left alone.

Before the finalisation takes place: this function removes all the easy
handles from the context of @var{multi}.
@end defun

@c page
@node plain multi easy
@subsection Adding and removing easy handles


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-add-handle @var{multi} @var{easy}
Add @var{easy} to the context of @var{multi}; if successful return
@code{CURLM_OK}, else return a @code{CURLM_} error code.
@curlman{curl_multi_add_handle}.
@end defun


@defun curl-multi-remove-handle @var{multi} @var{easy}
Remove @var{easy} from the context of @var{multi}; if successful return
@code{CURLM_OK}, else return a @code{CURLM_} error code.
@curlman{curl_multi_remove_handle}.

Notice that easy handles are automatically removed from a multi handle
whenever the multi handle is finalised, either explicitly with a call to
@func{curl-multi-cleanup} or implicitly by the garbage collector.
@end defun


@defun curl-multi-easies @var{multi}
Return a vector holding the easy handles registered in @var{multi}.
@end defun


Here is a meaningless example of adding and removing:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let* ((multi (curl-multi-init))
       (easy1 (curl-easy-init))
       (easy2 (curl-easy-init))
       (easy3 (curl-easy-init)))

  (curl-multi-add-handle multi easy1)   @result{} CURLM_OK
  (curl-multi-add-handle multi easy2)   @result{} CURLM_OK
  (curl-multi-add-handle multi easy3)   @result{} CURLM_OK

  (curl-multi-remove-handle multi easy1)   @result{} CURLM_OK
  (curl-multi-remove-handle multi easy2)   @result{} CURLM_OK
  (curl-multi-remove-handle multi easy3)   @result{} CURLM_OK

  (curl-easy-cleanup easy1)
  (curl-easy-cleanup easy2)
  (curl-easy-cleanup easy3)

  (curl-multi-cleanup multi))   @result{} CURLM_OK
@end example

@c page
@node plain multi config
@subsection Selecting options for multi operations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-setopt @var{multi} @var{option} @var{parameter}
Set an option for the @var{multi} handle; if successful return
@code{CURLM_OK}, if @var{option} is invalid return @false{}, else return
a @code{CURLM_} error code.  @curlman{curl_multi_setopt}.

@var{option} must be an exact integer representing one of the
@code{CURLMOPT_} constants.

The type of @var{parameter} depends upon the selected @var{option}
value; it can be one among:

@itemize
@item
An exact integer representing a C language type @code{long} or
@code{off_t}.  Whenever a @code{long} is expected: @true{} and @false{}
are also accepted and converted to @code{1} and @code{0}.

@item
A pointer object referencing a callback function.  When a callback
pointer is expected: @false{} is also accepted and converted to a
@cnull{} pointer.

@item
A generalised C string referencing some data, @cstringsref{}.  If the
value is a Scheme strings: it is converted to a bytevector with
@func{strings->utf8}.  For such values @false{} is also accepted to
represent the @cnull{} pointer.
@end itemize
@end defun


Here are meaningless examples of setting options:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(define multi
  (curl-multi-init)

(define socket-cb
  (make-curl-socket-callback
    (lambda (handle sock what callback-custom-data
             socket-custom-data)
      0)))

(define timer-cb
  (make-curl-multi-timer-callback
    (lambda (multi timeout-ms custom-data)
      0)))

(curl-multi-setopt multi CURLMOPT_SOCKETFUNCTION cb)
@result{} CURLM_OK

(curl-multi-setopt multi CURLMOPT_SOCKETDATA #f)
@result{} CURLM_OK

(curl-multi-setopt multi CURLMOPT_PIPELINING #t)
@result{} CURLM_OK

(curl-multi-setopt multi CURLMOPT_PIPELINING #f)
@result{} CURLM_OK

(curl-multi-setopt multi CURLMOPT_TIMERFUNCTION cb))
@result{} CURLM_OK

(curl-multi-setopt multi CURLMOPT_TIMERDATA #f)
@result{} CURLM_OK

(curl-multi-setopt multi CURLMOPT_MAXCONNECTS 123)
@result{} CURLM_OK
@end example

@c page
@node plain multi perform
@subsection Performing multi operations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-perform @var{multi}
Perform multi operations; return @math{2} values:

@enumerate
@item
An exact integer representing a @code{CURLM_} constant.

@item
An exact integer representing the number of running handles.
@end enumerate

@curlman{curl_multi_perform}.
@end defun


Here is an example of performance:

@smallexample
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(define (write-func buffer size nitems outstream)
  (let ((nbytes (* size nitems)))
    (guard (E (else (pretty-print E) nbytes))
      (fprintf (current-error-port) "Google's Home page:\n~a\n"
               (utf8->string (cstring->bytevector buffer nbytes))))
    nbytes))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(let ((multi      (curl-multi-init))
      (easy       (curl-easy-init))
      (write-cb   (make-curl-write-callback write-func)))
  (unwind-protect
      (begin
        (curl-easy-setopt easy CURLOPT_URL "http://google.com/")
        (curl-easy-setopt easy CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy CURLOPT_WRITEDATA #f)
        (curl-multi-add-handle multi easy)
        (let loop ((running 0))
          (let-values (((code running) (curl-multi-perform multi)))
            (when (or (= code CURLM_CALL_MULTI_PERFORM)
                      (not (zero? running)))
              (loop running))))
        (let-values (((msg nmsgs)
                      (curl-multi-info-read multi)))
          (when msg
            (%pretty-print (curlmsg->symbol (curl-msg.msg msg))))))
    (curl-multi-cleanup multi)
    ;;Close the connection before releasing the callbacks!!!
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)))
@print{} Google's Home page:
@print{} <HTML><HEAD><meta http-equiv="content-type"
 content="text/html;charset=utf-8">
@print{} <TITLE>301 Moved</TITLE></HEAD><BODY>
@print{} <H1>301 Moved</H1>
@print{} The document has moved
@print{} <A HREF="http://www.google.com/">here</A>.
@print{} </BODY></HTML>
@print{}
@print{} CURLMSG_DONE
@end smallexample

@c page
@node plain multi sockets
@subsection Performing multi operations with socket descriptors


@menu
* plain multi sockets fdsets::  Using file descriptor sets and @func{select}.
* plain multi sockets polls::   Using file descriptors and @func{poll}.
* plain multi sockets action::  Performing actions.
* plain multi sockets data::    Associating custom data to file
                                descriptors.
* plain multi sockets depre::   Deprecated functions.
@end menu

@c page
@node plain multi sockets fdsets
@subsubsection Using file descriptor sets and @func{select}


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-fdset @var{multi} @var{read-fds} @var{write-fds} @var{exc-fds}
Extract file descriptor informations from a multi handle; return
@math{2} values:

@enumerate
@item
If successful @code{CURLM_OK}, else a @code{CURLM_} error code.

@item
An exact integer representing the maximum socket descriptor set in the
@code{fd_set} structures; this value is @code{-1} if no socket
descriptors are set.
@end enumerate

@curlman{curl_multi_fdset}.

@var{read-fds}, @var{write-fds}, @var{exc-fds} must be @false{} or
pointer objects or @code{memory-block} holding or referencing C language
structures of type @code{fd_set}, ready to receive socket descriptors
registration; when @false{} an empty @code{fd_set} is internally
allocated and used.
@end defun

@c page
@node plain multi sockets polls
@subsubsection Using file descriptors and @func{poll}


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-waitfd
Data structure type representing at the Scheme level a @code{struct
curl_waitfd} C language structure.  It has the following fields:

@table @code
@item fd
Fixnum representing a socket descriptor.

@item events
Fixnum representing a @code{short int} bitmask of events.

@item revents
Fixnum representing a @code{short int} bitmask of events.
@end table
@end deftp


@defun make-curl-waitfd @var{fd} @var{events} @var{revent}
Build and return a new instance of @code{curl-waitfd}.
@end defun


@defun curl-waitfd? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-waitfd};
otherwise return @false{}.
@end defun


@defun curl-waitfd-fd @var{waitfd}
@defunx curl-waitfd-events @var{waitfd}
@defunx curl-waitfd-revents @var{waitfd}
Accessors for the fields of @code{curl-waitfd} structures.
@end defun


@defun curl-multi-wait @var{multi} @var{extra-fds} @var{timeout}
Polls on all easy handles in a @var{multi} handle.  Return two values:

@enumerate
@item
If successful @code{CURLM_OK}, else a @code{CURLM_} error code.

@item
An exact integer representing the number of file descriptors on which
events occurred.
@end enumerate

@curlman{curl_multi_wait}.

@var{extra-fds} must be @false{} or a Scheme vector holding zero or more
instances of @code{curl-waitfd} (which are internally converted to
@code{struct curl_waitfd}); such structures are mutated by this function
to reflect the manipulations performed by @curl{}.

@var{timeout} must be an exact integer in the range of the C language
type @code{int} representing the number of milliseconds to wait for an
event to happen.
@end defun


The following is a usage example for @func{curl-multi-wait} and
@func{curl-multi-socket-action}:

@smallexample
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.)
  (prefix (vicare posix) px.)
  (vicare syntactic-extensions))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(define-inline (%pretty-print ?thing)
  (pretty-print ?thing (current-error-port)))

(define-struct pending-socks
  (rd-requests
       ;Null or a list of  socket descriptors for which reading
       ;is requested.
   wr-requests
       ;Null or a list of  socket descriptors for which writing
       ;is requested.
   rw-requests
       ;Null or a list of  socket descriptors for which reading
       ;or writing is requested.
   ))

(define (%make-pending-socks)
  (make-pending-socks '() '() '()))

(define (pending-socks-remove! ps sock-fd)
  (pending-socks-remove-from-rd-requests! ps sock-fd)
  (pending-socks-remove-from-wr-requests! ps sock-fd)
  (pending-socks-remove-from-rw-requests! ps sock-fd))

(define (pending-socks-remove-from-rd-requests! ps sock-fd)
  (set-pending-socks-rd-requests! ps
    (remq sock-fd (pending-socks-rd-requests ps))))

(define (pending-socks-remove-from-wr-requests! ps sock-fd)
  (set-pending-socks-wr-requests! ps
    (remq sock-fd (pending-socks-wr-requests ps))))

(define (pending-socks-remove-from-rw-requests! ps sock-fd)
  (set-pending-socks-rw-requests! ps
    (remq sock-fd (pending-socks-rw-requests ps))))

(define (pending-socks-rd-request! ps sock-fd)
  (set-pending-socks-rd-requests! ps
    (cons sock-fd (pending-socks-rd-requests ps))))

(define (pending-socks-wr-request! ps sock-fd)
  (set-pending-socks-wr-requests! ps
    (cons sock-fd (pending-socks-wr-requests ps))))

(define (pending-socks-rw-request! ps sock-fd)
  (set-pending-socks-rw-requests! ps
    (cons sock-fd (pending-socks-rw-requests ps))))

;;;

(define (%curl-multi-socket-action multi sock-fd events)
  (let loop ()
    (let-values (((code still-running)
                  (curl-multi-socket-action multi sock-fd events)))
      (if (= code CURLM_CALL_MULTI_PERFORM)
          (loop)
        (values code still-running)))))

(define (socket-func easy sock-fd poll-type
                     callback-data sock-fd-data)
  (define ps
    (retrieve-to-avoid-collecting callback-data))
  (case-integers poll-type
    ((CURL_POLL_NONE)
     (void))
    ((CURL_POLL_IN)
     (pending-socks-rd-request! ps sock-fd))
    ((CURL_POLL_OUT)
     (pending-socks-wr-request! ps sock-fd))
    ((CURL_POLL_INOUT)
     (pending-socks-rw-request! ps sock-fd))
    ((CURL_POLL_REMOVE)
     (pending-socks-remove! ps sock-fd))))

(define (write-func buffer size nitems outstream)
  (let ((nbytes (* size nitems)))
    (guard (E (else (pretty-print E) nbytes))
      (fprintf (current-error-port) "Google's Home page:\n~a\n"
               (utf8->string (cstring->bytevector buffer nbytes))))
    nbytes))

(define (timer-func multi milliseconds timeout-pointer)
  (replace-to-avoid-collecting timeout-pointer milliseconds)
  0)

;;;

(let*
    ((multi     (curl-multi-init))
     (easy      (curl-easy-init))
     (write-cb  (make-curl-write-callback write-func))
     (socket-cb (make-curl-socket-callback socket-func))
     (timer-cb  (make-curl-multi-timer-callback timer-func))
     (timeout-pointer
                (register-to-avoid-collecting -1))
     (pending-socks
                (%make-pending-socks))
     (pending-socks-pointer
                (register-to-avoid-collecting pending-socks)))
  (unwind-protect
      (begin
        (curl-easy-setopt easy CURLOPT_URL "http://google.com/")
        (curl-easy-setopt easy CURLOPT_WRITEFUNCTION write-cb)
        (curl-easy-setopt easy CURLOPT_WRITEDATA #f)
        (curl-multi-setopt multi
                           CURLMOPT_TIMERFUNCTION timer-cb)
        (curl-multi-setopt multi
                           CURLMOPT_TIMERDATA timeout-pointer)
        (curl-multi-setopt multi
                           CURLMOPT_SOCKETFUNCTION socket-cb)
        (curl-multi-setopt multi
                           CURLMOPT_SOCKETDATA pending-socks-pointer)
        (curl-multi-add-handle multi easy)
        (let loop ()
          (let-values
              (((code still-running)
               (%curl-multi-socket-action multi CURL_SOCKET_TIMEOUT 0)))
            (when (and (= code CURLM_OK)
                       (not (zero? still-running)))
              (let-values
                  (((code number-of-eventful-fds)
                   (curl-multi-wait multi #f
                     (retrieve-to-avoid-collecting timeout-pointer))))
                (when (= code CURLM_OK)
                  (for-each
                      (lambda (sock-fd)
                        (%curl-multi-socket-action multi sock-fd
                           CURL_CSELECT_IN))
                    (pending-socks-rd-requests pending-socks))
                  (for-each
                      (lambda (sock-fd)
                        (%curl-multi-socket-action multi sock-fd
                           CURL_CSELECT_OUT))
                    (pending-socks-wr-requests pending-socks))
                  (loop))))))
        (let-values (((msg nmsgs)
                      (curl-multi-info-read multi)))
          (when msg
            (%pretty-print
              (curl-constant-msg->symbol (curl-msg.msg msg))))))
    ;;Close handles before releasing the callbacks!!!
    (curl-multi-cleanup multi)
    (curl-easy-cleanup easy)
    (ffi.free-c-callback write-cb)
    (ffi.free-c-callback timer-cb)
    (ffi.free-c-callback socket-cb)
    (forget-to-avoid-collecting pending-socks-pointer)))
@end smallexample

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-waitfd @var{obj}
@deffnx {Validation Clause} false-or-curl-waitfd @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-waitfd?}; the
second clause also accepts @false{}.
@end deffn

@c page
@node plain multi sockets action
@subsubsection Performing actions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-socket-action @var{multi} @var{sock-fd}
@defunx curl-multi-socket-action @var{multi} @var{sock-fd} @var{ev-bitmask}
Perform the pending actions for the socket descriptor @var{sock-fd};
return @math{2} values:

@enumerate
@item
If successful @code{CURLM_OK}, else a @code{CURLM_} error code.

@item
An exact integer representing the number of running handles.
@end enumerate

@curlman{curl_multi_socket_action}.

@var{sock-fd} must be the constant @code{CURL_SOCKET_TIMEOUT} or a
non--negative fixnum representing a socket descriptor in the context of
@var{multi}.

The optional @var{ev-bitmask} must be the fixnum zero or a bitwise
inclusive OR combination of the following constants:
@code{CURL_CSELECT_IN}, @code{CURL_CSELECT_OUT},
@code{CURL_CSELECT_ERR}; when not given: @var{ev-bitmask} defaults to
zero.
@end defun


@defun curl-multi-timeout @var{multi}
Query the multi handle for how many milliseconds to wait for socket
actions; if successful return @math{2} values:

@enumerate
@item
The constant @code{CURLM_OK}.

@item
An exact integer representing the number of milliseconds to wait; this
value can also be zero or @math{-1}.
@end enumerate

@noindent
else return the values: a @code{CURLM_} error code and @false{}.
@curlman{curl_multi_timeout}.
@end defun

@c page
@node plain multi sockets data
@subsubsection Associating custom data to file descriptors


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-assign @var{multi} @var{sock-fd} @var{custom-data}
Associate @var{custom-data} to @var{sock-fd} in the context of the
@var{multi} handle; if successful return @code{CURLM_OK}, else return a
@code{CURLM_} error code.  @curlman{curl_multi_assign}.

@var{sock-fd} must be a non--negative fixnum representing a socket
descriptor.

@var{custom-data} must be @false{} or a pointer object; @false{} is
internally converted to a @cnull{} pointer.
@end defun

@c page
@node plain multi sockets depre
@subsubsection Deprecated functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-socket @var{multi} @var{sock-fd}
This function is deprecated.  @curlman{curl_multi_socket}.
@end defun


@defun curl-multi-socket-all @var{multi}
This function is deprecated.  @curlman{curl_multi_socket_all}.
@end defun

@c page
@node plain multi misc
@subsection Miscellaneous functions for multi handles


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-multi-info-read @var{multi}
Retrieve the next informative message if any; return @math{2} values:

@enumerate
@item
@false{} or a pointer object referencing the next message from the queue
of messages as an instance of @code{CURLMsg}.  If this value is @false{}
it means that no messages are present.

@item
An exact integer representing the number of messages from the queue.
@end enumerate

@curlman{curl_multi_info_read}.

We can access the fields of a @code{CURLMsg} structure with the
@code{curl-msg} functions; @ref{plain cstructs msg} for details.
@end defun


@defun curl-multi-strerror @var{code}
Return @false{} or a string describing the @var{code} @code{CURLM_}
constant, which must be of type @code{CURLMcode}; @false{} is returned
if no message is available.  @curlman{curl_multi_strerror}.
@end defun

@c page
@node plain callbacks
@section Callback makers


@menu
Easy @api{} callbacks

* plain callbacks write::       Receiving data from a file transfer.
* plain callbacks read::        Sending data to a file transfer.
* plain callbacks ioctl::       Special control of a file transfer.
* plain callbacks seek::        Seeking into an outgoing file.
* plain callbacks sockopt::     Additional options for socket
                                descriptors.
* plain callbacks opensocket::  Opening a socket descriptor.
* plain callbacks closesocket:: Closing a socket descriptor.
* plain callbacks progress::    Tracking file transfer progress.
* plain callbacks header::      Receiving headers from file transfer.
* plain callbacks debug::       Debugging callback.
* plain callbacks sslctx::      OpenSSL context configuration.
* plain callbacks tonet::       Converting from host encoding to
                                network encoding.
* plain callbacks fromnet::     Converting from network encoding to
                                host encoding.
* plain callbacks fromutf8::    Converting from @utf{}-8 to
                                host encoding.
* plain callbacks interleave::  Processing interleaved @acronym{RTP} data.
* plain callbacks chunk::       Processing informations about
                                chunks of data.
* plain callbacks fnmatch::     Implementing wildcard matching.
* plain callbacks sshkey::      Accepting or rejecting @acronym{SSH} connections.
* plain callbacks xferinfo::    Getting notifications of timeouts.

Multi @api{} callbacks

* plain callbacks socket::      Getting informations about
                                socket status.
* plain callbacks mtimer::      Getting notifications of timeouts.
@end menu

@c page
@node plain callbacks write
@subsection Receiving data from a file transfer


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-write-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_write_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_WRITEFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to consume data incoming from a connection.
@curlref{curl_easy_setopt, CURLOPT_WRITEFUNCTION}.

@var{user-scheme-callback} must accept @math{4} arguments:

@enumerate
@item
A pointer object referencing the first byte in the input buffer.

@item
An exact integer representing the size in bytes of the items in the
input buffer.

@item
An exact integer representing the number of items in the input buffer.

@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_WRITEDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_WRITEDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: either the number of @strong{items} consumed from the input
buffer or the constant @code{CURL_WRITEFUNC_PAUSE}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain callbacks read
@subsection Sending data to a file transfer


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-read-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_read_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_READFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to produce data outgoing to a connection.
@curlref{curl_easy_setopt, CURLOPT_READFUNCTION}.

@var{user-scheme-callback} must accept @math{4} arguments:

@enumerate
@item
A pointer object referencing the first byte in the output buffer.

@item
An exact integer representing the size in bytes of the items to write to
the output buffer.

@item
An exact integer representing the maximum number of items to write to
the output buffer.

@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_READDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_READDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: either the number of @strong{bytes} actually written to the
output buffer or one of the constants @code{CURL_READFUNC_ABORT},
@code{CURL_READFUNC_PAUSE}.  Returning zero will signal the
end--of--file and will cause the end of the file transfer.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_READFUNC_ABORT} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks ioctl
@subsection Special control of a file transfer


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-ioctl-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_ioctl_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_IOCTLFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to perform special operations in a connection.
@curlref{curl_easy_setopt, CURLOPT_IOCTLFUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
An instance of @code{curl-easy} referencing the invoking session.

@item
An exact integer representing one of the @code{curliocmd} constants:
@code{CURLIOCMD_NOP}, @code{CURLIOCMD_RESTARTREAD}.

@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_IOCTLDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_IOCTLDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer, one of the @code{curlioerr} constants: @code{CURLIOE_OK},
@code{CURLIOE_UNKNOWNCMD}, @code{CURLIOE_FAILRESTART}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURLIOE_UNKNOWNCMD} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks seek
@subsection Seeking into an outgoing file


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-seek-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_seek_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_SEEKFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to seek to a position in the outgoing file.
@curlref{curl_easy_setopt, CURLOPT_SEEKFUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_SEEKDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_SEEKDATA}.

@item
An exact integer representing the offset from the reference position
selected by the last argument.

@item
An exact integer selecting the reference starting position for the
seeking operation, one among: @code{SEEK_SET}, @code{SEEK_CUR},
@code{SEEK_END} from the library @library{vicare platform-constants}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer, one of the constants: @code{CURL_SEEKFUNC_OK},
@code{CURL_SEEKFUNC_FAIL}, @code{CURL_SEEKFUNC_CANTSEEK}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_SEEKFUNC_FAIL} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks sockopt
@subsection Additional options for socket descriptors


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-socket-option-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_sockopt_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_SOCKOPTFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to allow an application to set additional socket options using
@func{setsockopt} from the library @library{vicare posix}.
@curlref{curl_easy_setopt, CURLOPT_SOCKOPTFUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_SOCKOPTDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_SOCKOPTDATA}.

@item
An exact integer representing the socket descriptor.

@item
An exact integer representing the purpose of the socket, a constant of
type @code{curlsocktype}: @code{CURLSOCKTYPE_IPCXN},
@code{CURLSOCKTYPE_ACCEPT}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer, one of the constants: @code{CURL_SOCKOPT_OK},
@code{CURL_SOCKOPT_ERROR}, @code{CURL_SOCKOPT_ALREADY_CONNECTED}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_SOCKOPT_ERROR} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks opensocket
@subsection Opening a socket descriptor


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-open-socket-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_opensocket_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_OPENSOCKETFUNCTION} option of @func{curl-easy-setopt}; it
is invoked to allow an application to open a socket using @func{socket}
from the library @library{vicare posix} and optionally set some socket
options using @func{setsockopt}.  @curlref{curl_easy_setopt,
CURLOPT_OPENSOCKETFUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_OPENSOCKETDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_OPENSOCKETDATA}.

@item
An exact integer representing the purpose of the socket, a constant of
type @code{curlsocktype}: @code{CURLSOCKTYPE_IPCXN},
@code{CURLSOCKTYPE_ACCEPT}.

@item
A pointer object referencing an instance of @code{struct curl_sockaddr};
such data structure can be accessed with the @code{curl-sockaddr.}
functions, @ref{plain misc, curl-sockaddr}.
@end enumerate

@var{user-scheme-callback} must return a single value being the exact
integer representing the socket descriptor or the constant
@code{CURL_SOCKET_BAD}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_SOCKET_BAD} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks closesocket
@subsection Closing a socket descriptor


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-close-socket-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_closesocket_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_CLOSESOCKETFUNCTION} option of @func{curl-easy-setopt}; it
is invoked to allow an application to close a socket using @func{close}
from the library @library{vicare posix}.  @curlref{curl_easy_setopt,
CURLOPT_CLOSESOCKETFUNCTION}.

@var{user-scheme-callback} must accept @math{2} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
this value is associated to the callback with the
@code{CURLOPT_CLOSESOCKETDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_CLOSESOCKETDATA}.

@item
An exact integer representing the socket descriptor.
@end enumerate

@var{user-scheme-callback} must return a single value being the exact
integer: @code{0} to signal success or @code{1} to signal failure.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{1} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain callbacks progress
@subsection Tracking file transfer progress


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-progress-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_progress_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_PROGRESSFUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_PROGRESSFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_PROGRESSDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_PROGRESSDATA}.

@item
A flonum representing the total download size.

@item
A flonum representing the current download size.

@item
A flonum representing the total upload size.

@item
A flonum representing the current upload size.
@end enumerate

@var{user-scheme-callback} must return a single value which is the
answer to the question ``Abort the transfer?''; when the returned value
is true the transfer is aborted, else the transfer will proceed.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.

@item
When @var{user-scheme-callback} returns true: the value returned to the
callback caller is @code{1}; else the value returned is @code{0}.
@end itemize
@end defun

@c page
@node plain callbacks header
@subsection Receiving headers from file transfer


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-header-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function; the returned pointer must be released
with a call to @func{free-c-callback} from @library{vicare ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_HEADERFUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_HEADERFUNCTION}.

@var{user-scheme-callback} must accept @math{4} arguments:

@enumerate
@item
A pointer object referencing an input buffer holding the header text.

@item
An exact integer representing the size of items in the input buffer.

@item
An exact integer representing the number of items in the input buffer.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_HEADERDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_HEADERDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: the number of @strong{bytes} consumed from the input buffer; if
the returned value is different from the product between the second and
third arguments: it means an error occurred.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain callbacks debug
@subsection Debugging callback


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-debug-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_debug_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_DEBUGFUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_DEBUGFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
An instance of @code{curl-easy} referencing the invoking session.

@item
An exact integer, in the range of the C language type
@code{curl_infotype}, one of the constants: @code{CURLINFO_TEXT},
@code{CURLINFO_HEADER_IN}, @code{CURLINFO_HEADER_OUT},
@code{CURLINFO_DATA_IN}, @code{CURLINFO_DATA_OUT},
@code{CURLINFO_SSL_DATA_IN}, @code{CURLINFO_SSL_DATA_OUT}.

@item
A pointer object referencing the input debug data.

@item
The number of bytes in the input debug data.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_DEBUGDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_DEBUGDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being the exact
integer @code{0}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain callbacks sslctx
@subsection OpenSSL context configuration


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-ssl-ctx-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_ssl_ctx_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_SSL_CTX_FUNCTION} option of @func{curl-easy-setopt}; it
allows the application to specify options and actions for OpenSSL
operations.  @curlref{curl_easy_setopt, CURLOPT_SSL_CTX_FUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
An instance of @code{curl-easy} referencing the invoking session.

@item
A pointer object referencing an instance of the C language type
@code{SSL_CTX} defined by OpenSSL.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_SSL_CTX_DATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_SSL_CTX_DATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: if successful @code{CURLE_OK}, else one of the @code{CURLE_}
error codes.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURLE_ABORTED_BY_CALLBACK} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks tonet
@subsection Converting from host encoding to network encoding


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-conv-to-network-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as callback; the
returned pointer must be released with a call to @func{free-c-callback}
from @library{vicare ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_CONV_TO_NETWORK_FUNCTION} option of
@func{curl-easy-setopt}; its purpose is to convert from host encoding to
network encoding.  @curlref{curl_easy_setopt,
CURLOPT_CONV_TO_NETWORK_FUNCTION}.

@var{user-scheme-callback} must accept @math{2} arguments:

@enumerate
@item
A pointer object referencing the input data.

@item
An exact integer representing the number of bytes in the input data.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: if successful @code{CURLE_OK}, else one of the @code{CURLE_}
error codes.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURLE_ABORTED_BY_CALLBACK} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks fromnet
@subsection Converting from network encoding to host encoding


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-conv-from-network-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as callback; the
returned pointer must be released with a call to @func{free-c-callback}
from @library{vicare ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_CONV_FROM_NETWORK_FUNCTION} option of
@func{curl-easy-setopt}; its purpose is to convert from network encoding
to host encoding.  @curlref{curl_easy_setopt,
CURLOPT_CONV_FROM_NETWORK_FUNCTION}.

@var{user-scheme-callback} must accept @math{2} arguments:

@enumerate
@item
A pointer object referencing the input data.

@item
An exact integer representing the number of bytes in the input data.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: if successful @code{CURLE_OK}, else one of the @code{CURLE_}
error codes.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURLE_ABORTED_BY_CALLBACK} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks fromutf8
@subsection Converting from @utf{}-8 to host encoding


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-conv-from-utf8-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as callback; the
returned pointer must be released with a call to @func{free-c-callback}
from @library{vicare ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_CONV_FROM_UTF8_FUNCTION} option of
@func{curl-easy-setopt}; its purpose is to convert from network encoding
to host encoding.  @curlref{curl_easy_setopt,
CURLOPT_CONV_FROM_UTF8_FUNCTION}.

@var{user-scheme-callback} must accept @math{2} arguments:

@enumerate
@item
A pointer object referencing the input data.

@item
An exact integer representing the number of bytes in the input data.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer: if successful @code{CURLE_OK}, else one of the @code{CURLE_}
error codes.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURLE_ABORTED_BY_CALLBACK} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks interleave
@subsection Processing interleaved @acronym{RTP} data


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-interleave-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as callback; the
returned pointer must be released with a call to @func{free-c-callback}
from @library{vicare ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_INTERLEAVEFUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_INTERLEAVEFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing the input data.

@item
An exact integer representing the size of items in the input data.

@item
An exact integer representing the number of items in the input data.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_INTERLEAVEDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_INTERLEAVEDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer representing the number of @strong{bytes} consumed from the
input.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain callbacks chunk
@subsection Processing informations about chunks of data


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-chunk-begin-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_chunk_bgn_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_CHUNK_BGN_FUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_CHUNK_BGN_FUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
A pointer object referencing data depending on the session.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_CHUNK_DATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_CHUNK_DATA}.

@item
An exact integer representing the number of chunks remaining per
transfer.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer, one among: @code{CURL_CHUNK_BGN_FUNC_OK},
@code{CURL_CHUNK_BGN_FUNC_FAIL}, @code{CURL_CHUNK_BGN_FUNC_SKIP}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_CHUNK_BGN_FUNC_FAIL} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c ------------------------------------------------------------

@defun make-curl-chunk-end-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_chunk_end_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_CHUNK_END_FUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_CHUNK_END_FUNCTION}.

@var{user-scheme-callback} must accept one argument: @false{} or a
pointer object referencing an application selected value; such value is
associated to the callback with the @code{CURLOPT_CHUNK_DATA} option of
@func{curl-easy-setopt}.  @curlref{curl_easy_setopt,
CURLOPT_CHUNK_DATA}.

@var{user-scheme-callback} must return a single value being an exact
integer, a constant among: @code{CURL_CHUNK_END_FUNC_OK},
@code{CURL_CHUNK_END_FUNC_FAIL}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_CHUNK_END_FUNC_FAIL} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks fnmatch
@subsection Implementing wildcard matching


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-fnmatch-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_fnmatch_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_FNMATCH_FUNCTION} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_FNMATCH_FUNCTION}.

@var{user-scheme-callback} must accept @math{3} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_FNMATCH_DATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_FNMATCH_DATA}.

@item
A pointer object referencing a zero--terminated string representing the
pattern to match.

@item
A pointer object referencing a zero--terminated string representing the
text to match against the pattern.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer, a constant among: @code{CURL_FNMATCHFUNC_MATCH},
@code{CURL_FNMATCHFUNC_NOMATCH}, @code{CURL_FNMATCHFUNC_FAIL}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURL_FNMATCHFUNC_FAIL} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks sshkey
@subsection Accepting or rejecting @acronym{SSH} connections


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-sshkey-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_sshkeycallback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_SSH_KEYFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to accept or reject @acronym{SSH} connections.
@curlref{curl_easy_setopt, CURLOPT_SSH_KEYFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
An instance of @code{curl-easy} referencing the invoking session.

@item
@false{} or a pointer object, referencing an instance of the C language
type @code{struct curl_khkey}, representing the key from the
@file{known_hosts} file.

@item
A pointer object, referencing an instance of the C language type
@code{struct curl_khkey}, representing the key from the remote site.

@item
An exact integer representing a constant of type @code{enum
curl_khmatch}, one among: @code{CURLKHMATCH_OK},
@code{CURLKHMATCH_MISMATCH}, @code{CURLKHMATCH_MISSING}.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the callback with the
@code{CURLOPT_SSH_KEYDATA} option of @func{curl-easy-setopt}.
@curlref{curl_easy_setopt, CURLOPT_SSH_KEYDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer representing a constant of type @code{enum curl_khstat}, one
among: @code{CURLKHSTAT_FINE_ADD_TO_FILE}, @code{CURLKHSTAT_FINE},
@code{CURLKHSTAT_REJECT}, @code{CURLKHSTAT_DEFER}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{CURLKHSTAT_REJECT} to the caller.
@var{user-scheme-callback} should take care of handling its own
exceptions.
@end itemize
@end defun

@c page
@node plain callbacks xferinfo
@subsection Getting notifications of timeouts


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-xferinfo-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_xferinfo_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_XFERINFOFUNCTION} option of @func{curl-easy-setopt}; it is
invoked to notify the application of statistics about the transferred
data.  @curlref{curl_easy_setopt, CURLOPT_XFERINFOFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
@false{} or a custom pointer selected by the application with the option
@code{CURLOPT_XFERINFODATA}.

@item
An exact integer representing the number of bytes expected to be
downloaded in this transfer.

@item
An exact integer representing the number of bytes downloaded so far.

@item
An exact integer representing the number of bytes expected to be
uploaded in this transfer.

@item
An exact integer representing the number of bytes uploaded so far.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer in the range of the C language type @code{signed int}; when the
callback is successul: the return value should be zero, non--zero
otherwise.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain callbacks socket
@subsection Getting informations about socket status


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-socket-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_socket_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-multi} instances with the
@code{CURLMOPT_SOCKETFUNCTION} option of @func{curl-multi-setopt}; it is
invoked to notify the application about status changes for a socket
descriptor.  @curlref{curl_multi_setopt, CURLMOPT_SOCKETFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
An instance of @code{curl-easy} referencing the session associated to
the socket.

@item
An exact integer representing the socket descriptor.

@item
An exact integer representing one of the constants:
@code{CURL_POLL_NONE}, @code{CURL_POLL_IN}, @code{CURL_POLL_OUT},
@code{CURL_POLL_INOUT}, @code{CURL_POLL_REMOVE}.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the @strong{callback} with the
@code{CURLMOPT_SOCKETDATA} option of @func{curl-multi-setopt}.
@curlref{curl_multi_setopt, CURLMOPT_SOCKETDATA}.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the @strong{socket descriptor} with the
function @func{curl-multi-assign}.  @curlman{curl_multi_assign}.
@end enumerate

@var{user-scheme-callback} can return unspecified values.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.

@item
Discard the values returned by @var{user-scheme-callback}; always return
@code{0} to the caller.
@end itemize
@end defun

@c page
@node plain callbacks mtimer
@subsection Getting notifications of timeouts


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-multi-timer-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_multi_timer_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-multi} instances with the
@code{CURLMOPT_TIMERFUNCTION} option of @func{curl-multi-setopt}; it is
invoked to notify the application about changes in timeout expirations.
@curlref{curl_multi_setopt, CURLMOPT_TIMERFUNCTION}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
An instance of @code{curl-multi} referencing the invoking session.

@item
An exact integer representing the number of milliseconds until the next
timeout expiration; a value of @code{-1} means that there is no pending
timeout; a value of @code{0} means that the timeout has already expired.

@item
@false{} or a pointer object referencing an application selected value;
such value is associated to the @strong{callback} with the
@code{CURLMOPT_TIMERDATA} option of @func{curl-multi-setopt}.
@curlref{curl_multi_setopt, CURLMOPT_TIMERDATA}.
@end enumerate

@var{user-scheme-callback} must return a single value being an exact
integer of unknown meaning (but there is a meaning believe me, I just do
not know what it is).

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain slists
@section String lists


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-slist-append @var{string}
@defunx curl-slist-append @var{slist} @var{string}
Add a string to a list of strings, possibly creating a new list; if
successful return a pointer object representing the head of the list,
else return @false{}.  @curlman{curl_slist_append}.

The returned list must be released by @func{curl-slist-free-all}.

@var{slist} must be @false{} or a pointer object.  When @var{slist} is
@false{} or the @cnull{} pointer or not given: a new list is allocated.

@var{string} must be a string, @ascii{} bytevector, pointer or
@code{memory-block}.

@example
#!r6rs
(import (vicare)
  (vicare net curl))

;; assuming no error occurs
(let* ((slist (curl-slist-append "ciao"))
       (slist (curl-slist-append slist "hello"))
       (slist (curl-slist-append slist "salut")))
  (curl-slist-free-all slist)
  slist)
@result{} #<pointer #x00000000>
@end example
@end defun


@defun curl-slist-free-all @var{slist}
Release all the resources associated to @var{slist}, which must be the
return value of a previous call to @func{curl-slist-append}; return
unspecified values.  @curlman{curl_slist_free_all}.

@var{slist} must be @false{} or a pointer.  When @var{slist} is @false{}
or a @cnull{} pointer: nothing happens.  When @var{slist} is a
non--@cnull{} pointer: @var{slist} itself is mutated to represent
@cnull{}.

It is safe to apply this function multiple times to the same @var{slist}
argument.
@end defun


@defun curl-slist->list @var{slist}
@defunx list->curl-slist @var{list-of-strings}
Convert a list of strings to and from a @code{curl-list}.
@end defun

@c page
@node plain forms
@section Multipart/formdata composition


@menu
* plain forms structs::         @http{} post data structures.
* plain forms init::            Initialisation and finalisation.
* plain forms adding::          Adding data to @http{} post.
* plain forms inspect::         Inspecting @http{} post data.
@end menu

@c page
@node plain forms structs
@subsection @http{} post data structures


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-form-data
@cindex @var{httppost} argument
@cindex Argument @var{httppost}
Opaque structure type referencing the first element in a C language
@code{struct curl_httppost} chain.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{httppost}.

Instances of this type must be finalised with @func{curl-formfree}.
Whenever an instance of this type is garbage collected:
@func{curl-formfree} is automatically applied to it.
@end deftp


@defun curl-form-data? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-form-data};
otherwise return @false{}.
@end defun


@defun curl-form-data?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-form-data} and
it holds some contents; otherwise return @false{}.
@end defun


@defun curl-form-data-custom-destructor @var{httppost}
@defunx set-curl-form-data-custom-destructor! @var{httppost} @var{func}
Retrieve or set a destructor function associated to the @var{httppost}.

Whenever the @var{httppost} is finalised, either explicitly with
@func{curl-formfree} or implicitly by the garbage collector, @var{func}
is applied to @var{httppost} before the internal state of @var{httppost}
is finalised.

Notice that @var{func} can do anything, not only destroy some state
associated to @var{httppost}; if we do:

@example
(define httppost ...)
(set-curl-form-data-custom-destructor! httppost
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((httppost)
       (destroy state))
      (()
       state))))

(let ((state ((curl-form-data-custom-destructor httppost))))
  (do-something-with httppost state))
@end example

@noindent
we can easily associate values to @var{httppost}.
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-form-data @var{obj}
@deffnx {Validation Clause} false-or-curl-form-data @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-form-data?}; the
second clause also accepts @false{}.
@end deffn


@deffn {Validation Clause} curl-form-data/alive @var{obj}
@deffnx {Validation Clause} false-or-curl-form-data/alive @var{obj}
Succeed if @var{obj} satisfies the predicate
@func{curl-form-data?/alive}; the second clause also accepts @false{}.
@end deffn

@c page
@node plain forms init
@subsection Initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-form-data
Build and return a new instance of @code{curl-form-data} ready to be
handed to @func{curl-formadd}.
@end defun


@defun curl-formfree @var{httppost}
Release all the resources associated to @var{httppost}, which must be an
instance of @code{curl-form-data}; return unspecified values.
@curlman{curl_formfree}.

It is safe to apply this function multiple times to the same
@var{httppost} argument: the first time the data is finalised, the
subsequent times nothing happens.
@end defun

@c page
@node plain forms adding
@subsection Adding data to @http{} post


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-formadd @var{httppost} @vari{opt} @vari{val}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @var{end}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @varii{opt} @varii{val}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @varii{opt} @varii{val} @var{end}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val} @var{end}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val} @variv{opt} @variv{val}
@defunx curl-formadd @var{httppost} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val} @variv{opt} @variv{val} @var{end}
Add a section to a multipart/formdata @http{} @acronym{POST}; if
successful return @code{CURL_FORMADD_OK}, else return a
@code{CURL_FORMADD_} error code.  @curlman{curl_formadd}.

@var{httppost} must be an instance of @code{curl-form-data}; at the
first invocation of this function @var{httppost} must be the return
value of @func{make-curl-form-data}.

Each @var{opt}/@var{val} couple must be an option/value couple in which
@var{opt} is one of the @code{CURLFORM_} constants and @var{val} is one
among: an exact integer in the range of the C language type @code{long},
a string, an @ascii{} bytevector, a pointer, a @code{memory-block}.

When present @var{end} must be the constant @code{CURLFORM_END}.
@end defun


Example of adding 2 parts:

@example
(import (rnrs)
  (vicare net curl)
  (vicare net curl constants))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(define http-post
  (make-curl-form-data))

(curl-formadd http-post
  CURLFORM_COPYNAME "name"
  CURLFORM_COPYCONTENTS "contents"
  CURLFORM_END)

(curl-formadd http-post
  CURLFORM_COPYNAME "other_name"
  CURLFORM_COPYCONTENTS "other contents"
  CURLFORM_END)
@end example

@noindent
the string returned by @func{curl-form-data-string} for such composition
is something like (with line wrapping added):

@example
Content-Type: multipart/form-data; \
  boundary=----------------------------81c1e6167e72
------------------------------81c1e6167e72
Content-Disposition: form-data; name="name"

contents
------------------------------81c1e6167e72
Content-Disposition: form-data; name="other_name"

other contents
------------------------------81c1e6167e72--
@end example

@c page
@node plain forms inspect
@subsection Inspecting @http{} post data


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-form-data-string @var{httppost}
Given an instance of @code{curl-form-data} extract a string representing
the current contents; if successful return the string, else return
@false{}.
@end defun
@defun curl-formget @var{httppost} @var{custom-data} @var{callback}
Invoke a @var{callback} for each line of content in @var{httppost}; when
successful return @false{}, else return @true{}.
@curlman{curl_formget}.

@var{httppost} must be an instance of @code{curl-form-data}.

@var{callback} must be the return value of a call to
@func{make-curl-formget-callback}.

@var{custom-data} must be @false{} or a pointer object that will be used
as first argument to @var{callback}; when @false{}, the argument will be
the @cnull{} pointer.
@end defun


@defun make-curl-formget-callback @var{user-scheme-function}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as @var{callback}
argument in calls to @func{curl-formget}; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-function} must accept @math{3} arguments:

@enumerate
@item
A copy of the argument @var{custom-data} given to @func{curl-formget}.

@item
A pointer object referencing the line of content.

@item
An exact integer, in the range of the C language type @code{size_t},
representing the number of bytes in the content.
@end enumerate

When successful @var{user-scheme-callback} must return its last
argument, the number of bytes in the content; else it must return a
different exact integer in the range of the C language type
@code{size_t}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{user-scheme-callback} raises an exception: the raised object is
discarded and the callback returns the fixnum zero.
@end itemize
@end defun


Here is a meaningless usage of the callback:

@example
(import (rnrs)
  (vicare net curl)
  (vicare net curl constants))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(define http-post
  (make-curl-form-data))

(curl-formadd http-post
  CURLFORM_COPYNAME "name"
  CURLFORM_COPYCONTENTS "contents"
  CURLFORM_END)

(define data "")
(define callback
  (make-curl-formget-callback
    (lambda (custom-data cstring.ptr cstring.len)
      (set! data (string-append data
                   (cstring->string cstring.ptr
                                    cstring.len)))
      cstring.len)))

(curl-formget http-post #f callback)

(ffi.free-c-callback callback)
(curl-formfree http-post)
@end example

@c page
@node plain shares
@section Shared configuration option sets


@value{FOREIGN_PACKAGE} allows us to share entities and configuration
options among easy handles through shared sets called @dfn{shares}.

@menu
* plain shares examples::       Shares examples.
* plain shares structs::        Shares data structures.
* plain shares init::           Initialisation and finalisation
                                of shares.
* plain shares opts::           Registering in shares.
* plain shares callbacks::      Preparing callback functions.
* plain shares misc::           Miscellaneous shares functions.
@end menu

@c page
@node plain shares examples
@subsection Shares examples


Random options setting:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(assert (= CURLE_OK (curl-global-init CURL_GLOBAL_ALL)))

(define share
  (curl-share-init))

(curl-share-setopt share CURLSHOPT_SHARE CURL_LOCK_DATA_COOKIE)
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_SHARE CURL_LOCK_DATA_DNS)
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_USERDATA #f)
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_LOCKFUNC
   (make-curl-lock-function
     (lambda (easy what-to-lock how-to-lock custom-data)
       (void))))
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_UNLOCKFUNC
   (make-curl-lock-function
     (lambda (easy what-to-lock custom-data)
       (void))))
@result{} CURLSHE_OK

(define easy
  (curl-easy-init))

(curl-easy-setopt easy CURLOPT_SHARE share)
@result{} CURLE_OK
@end example

@c page
@node plain shares structs
@subsection Shares data structures


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-share
@cindex @var{share} argument
@cindex Argument @var{share}
Opaque structure type used to reference instances of the C language type
@code{CURLSH}.  Such data structures can be registered in easy handles
with the @code{CURLOPT_SHARE} option of @func{curl-easy-setopt}.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{share}.

Instances of this type must be finalised with @func{curl-share-cleanup};
whenever an instance of this type is garbage collected:
@func{curl-share-cleanup} is automatically applied to it and any error
ignored.
@end deftp


@defun curl-share? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-share};
otherwise return @false{}.
@end defun


@defun curl-share?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-share} and it
has not been finalised yet; otherwise return @false{}.
@end defun


@defun curl-share-custom-destructor @var{share}
@defunx set-curl-share-custom-destructor! @var{share} @var{func}
Retrieve or set a destructor function associated to the @var{share}.

Whenever the @var{share} is finalised, either explicitly with
@func{curl-share-cleanup} or implicitly by the garbage collector,
@var{func} is applied to @var{share} before the internal state of
@var{share} is finalised.

Notice that @var{func} can do anything, not only destroy some state
associated to @var{share}; if we do:

@example
(define share ...)
(set-curl-share-custom-destructor! share
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((share)
       (destroy state))
      (()
       state))))

(let ((state ((curl-share-custom-destructor share))))
  (do-something-with share state))
@end example

@noindent
we can easily associate values to @var{share}.
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-share @var{obj}
@deffnx {Validation Clause} false-or-curl-share @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-share?}; the
second clause also accepts @false{}.
@end deffn


@deffn {Validation Clause} curl-share/alive @var{obj}
@deffnx {Validation Clause} false-or-curl-share/alive @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-share?/alive};
the second clause also accepts @false{}.
@end deffn

@c page
@node plain shares init
@subsection Initialisation and finalisation of shares


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-share-init
Build a new instance of @code{curl-share}; if successful return the
instance, else return @false{}.  @curlman{curl_share_cleaup}.
@end defun


@defun curl-share-cleanup @var{share}
Attempt to release all the resources associated to @var{share}, which
must be an instance of @code{curl-share}.  If the finalisation happens
and it is successful: return @code{CURLSHE_OK}; if the finalisation
happens and it fails: return a @code{CURLSHE_} error code; if
@var{share} was already finalised: return @false{}.
@curlman{curl_share_cleanup}.

It is safe to apply this function multiple times to the same @var{share}
object: the first time the data is finalised, the subsequent times
nothing happens.

@strong{NOTE} When this function actually finalises a @code{CURLSH}
object the registered callbacks may be called; be careful not to release
them before finalising @var{share}.
@end defun

@c page
@node plain shares opts
@subsection Registering in shares


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-share-setopt @var{share} @var{option} @var{parameter}
Set @var{option} to @var{parameter} for the given @var{share}; if
successful return @code{CURLSHE_OK}, else return a @code{CURLSHE_} error
code.  @curlman{curl_share_setopt}.

@var{option} must be an exact integer representing a @code{CURLSHOPT_}
constant.

The type of @var{parameter} depends on @var{option}.  Whenever the
@var{option} requires a pointer value: @var{parameter} can be either a
pointer object or @false{}, which will be converted to @cnull{}.
@end defun

@c page
@node plain shares callbacks
@subsection Preparing callback functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-lock-function @var{user-scheme-function}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as @var{parameter}
argument in calls to @func{curl-share-setopt} with @var{option} set to
@code{CURLSHOPT_LOCKFUNC}; the returned pointer must be released with a
call to @func{free-c-callback} from @library{vicare ffi}.

@var{user-scheme-function} must accept @math{4} arguments:

@enumerate
@item
A temporary instance of @code{curl-easy} @strong{not} holding ownership
for the wrapped @code{CURL} instance.

@item
An exact integer representing a @code{CURL_LOCK_DATA_} constant.

@item
An exact integer representing a @code{CURL_LOCK_ACCESS_} constant.

@item
A copy of the value registered in the associated @var{share} with the
@var{option} @code{CURLSHOPT_USERDATA}; this is @false{} or a pointer
object.
@end enumerate

@var{user-scheme-callback} can return unspecified values.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Whatever value is returned by @var{user-scheme-callback} it is discarded
and @code{(void)} is returned instead.

@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{user-scheme-callback} raises an exception: the raised object is
discarded and the callback returns @code{(void)}.
@end itemize
@end defun


@defun make-curl-unlock-function @var{user-scheme-function}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as @var{parameter}
argument in calls to @func{curl-share-setopt} with @var{option} set to
@code{CURLSHOPT_UNLOCKFUNC}; the returned pointer must be released with
a call to @func{free-c-callback} from @library{vicare ffi}.

@var{user-scheme-function} must accept @math{3} arguments:

@enumerate
@item
A temporary instance of @code{curl-easy} @strong{not} holding ownership
for the wrapped @code{CURL} instance.

@item
An exact integer representing a @code{CURL_LOCK_DATA_} constant.

@item
A copy of the value registered in the associated @var{share} with the
@var{option} @code{CURLSHOPT_USERDATA}; this is @false{} or a pointer
object.
@end enumerate

@var{user-scheme-callback} can return unspecified values.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Whatever value is returned by @var{user-scheme-callback} it is discarded
and @code{(void)} is returned instead.

@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{user-scheme-callback} raises an exception: the raised object is
discarded and the callback returns @code{(void)}.
@end itemize
@end defun

@c page
@node plain shares misc
@subsection Miscellaneous shares functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-share-strerror @var{errcode}
@defunx curl-share-strerror/string @var{errcode}
Given an exact integer representing a @code{CURLSHE_} error code return
an @ascii{} bytevector or string describing the associated error.
@curlman{curl_share_strerror}.
@end defun

@c page
@node plain cstructs
@section Accessing C language data structures


@menu
* plain cstructs sockaddr::     Accessing @code{struct curl_sockaddr}.
* plain cstructs fileinfo::     Accessing @code{struct curl_fileinfo}.
* plain cstructs khkey::        Accessing @code{struct curl_khkey}.
* plain cstructs forms::        Accessing @code{struct curl_forms} arrays.
* plain cstructs certinfo::     Accessing @code{struct curl_certinfo}.
* plain cstructs msg::          Accessing @code{struct CURLMsg}.
@end menu

@c page
@node plain cstructs sockaddr
@subsection Accessing @code{struct curl_sockaddr}


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-sockaddr.family @var{pointer}
@defunx curl-sockaddr.socktype @var{pointer}
@defunx curl-sockaddr.protocol @var{pointer}
@defunx curl-sockaddr.addrlen @var{pointer}
@defunx curl-sockaddr.addr @var{pointer}
Given a pointer to a @code{struct curl_sockaddr}, return the value of
each field in such structure.  All the functions return an exact
integer, but @func{curl-sockaddr.addr} which returns a bytevector
holding the whole @code{struct sockaddr} field.
@end defun

@c page
@node plain cstructs fileinfo
@subsection Accessing @code{struct curl_fileinfo}


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-fileinfo
Structure type mirroring a C language structure of type @code{struct
curl_fileinfo}.  It has the following fields:

@table @code
@item filename
@false{} or a string.

@item filetype
An exact integer.

@item time
An exact integer.

@item perm
An exact integer.

@item uid
An exact integer.

@item gid
An exact integer.

@item size
An exact integer.

@item hardlinks
An exact integer.

@item strings.time
@false{} or a string.

@item strings.perm
@false{} or a string.

@item strings.user
@false{} or a string.

@item strings.group
@false{} or a string.

@item strings.target
@false{} or a string.

@item flags
An exact integer.
@end table
@end deftp


@defun curl-fileinfo? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-fileinfo}.
@end defun


@defun pointer->curl-fileinfo @var{pointer}
Given a pointer object referencing a C language @code{struct
curl_fileinfo}, build and return an instance of @code{curl-fileinfo}
mirroring it.
@end defun


@defun curl-fileinfo-filename @var{fileinfo}
@defunx curl-fileinfo-filetype @var{fileinfo}
@defunx curl-fileinfo-time @var{fileinfo}
@defunx curl-fileinfo-perm @var{fileinfo}
@defunx curl-fileinfo-uid @var{fileinfo}
@defunx curl-fileinfo-gid @var{fileinfo}
@defunx curl-fileinfo-size @var{fileinfo}
@defunx curl-fileinfo-hardlinks @var{fileinfo}
@defunx curl-fileinfo-strings.time @var{fileinfo}
@defunx curl-fileinfo-strings.perm @var{fileinfo}
@defunx curl-fileinfo-strings.user @var{fileinfo}
@defunx curl-fileinfo-strings.group @var{fileinfo}
@defunx curl-fileinfo-strings.target @var{fileinfo}
@defunx curl-fileinfo-flags @var{fileinfo}
Accessors for the fields of a @code{curl-fileinfo} instance.
@end defun


@defun curl-fileinfo.filename @var{pointer}
@defunx curl-fileinfo.filetype @var{pointer}
@defunx curl-fileinfo.time @var{pointer}
@defunx curl-fileinfo.perm @var{pointer}
@defunx curl-fileinfo.uid @var{pointer}
@defunx curl-fileinfo.gid @var{pointer}
@defunx curl-fileinfo.size @var{pointer}
@defunx curl-fileinfo.hardlinks @var{pointer}
@defunx curl-fileinfo.strings.time @var{pointer}
@defunx curl-fileinfo.strings.perm @var{pointer}
@defunx curl-fileinfo.strings.user @var{pointer}
@defunx curl-fileinfo.strings.group @var{pointer}
@defunx curl-fileinfo.strings.target @var{pointer}
@defunx curl-fileinfo.flags @var{pointer}
Accessors for C language @code{struct curl_fileinfo} instances
referenced by a pointer object.  When a struct field is of type
@code{char *}: the corresponding accessor returns a pointer object.
@end defun

@c ------------------------------------------------------------

@subsubheading Arguments validation

The following bindings are meant to be used along the library
@library{vicare arguments validation}.


@deffn {Validation Clause} curl-fileinfo @var{obj}
@deffnx {Validation Clause} false-or-curl-fileinfo @var{obj}
Succeed if @var{obj} satisfies the predicate @func{curl-fileinfo?}; the
second clause also accepts @false{}.
@end deffn

@c page
@node plain cstructs khkey
@subsection Accessing @code{struct curl_khkey}


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-khkey.key @var{pointer}
Given a pointer object referencing a C language @code{struct
curl_khkey}, return two values:

@enumerate
@item
@true{} if the second value holds data encoded in base64, @false{} if
the second value holds raw data.

@item
A bytevector holding the key data.
@end enumerate
@end defun

@c page
@node plain cstructs forms
@subsection Accessing @code{struct curl_forms} arrays


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-forms-sizeof-array @var{number-of-structs}
Return the number of bytes that need to be allocated to hold an array of
@var{number-of-structs} instances of type @code{struct curl_forms}.
@end defun


@defun curl-forms.option @var{array} @var{index}
Given @var{array} as bytevector or pointer object or @code{memory-block}
holding an array of @code{struct curl_forms}, extract and return an
exact integer representing the @code{option} field of the structure at
@var{index}.
@end defun


@defun curl-forms.value @var{array} @var{index}
Given @var{array} as bytevector or pointer object or @code{memory-block}
holding an array of @code{struct curl_forms}, extract the @code{value}
field of the structure at @var{index} and return @false{} if it is
@cnull{} or a string if it is not.
@end defun


@defun curl-forms.option-set! @var{array} @var{index} @var{value}
Given @var{array} as bytevector or pointer object or @code{memory-block}
holding an array of @code{struct curl_forms}, store the exact integer
@var{value} in the @code{option} field of the structure at @var{index}.
@end defun


@defun curl-forms.value-set! @var{array} @var{index} @var{value}
Given @var{array} as bytevector or pointer object or @code{memory-block}
holding an array of @code{struct curl_forms}, store the pointer from
@code{value} in the field of the structure at @var{index}.

@var{value} must be a pointer object or @code{memory-block}.
@end defun

@c page
@node plain cstructs certinfo
@subsection Accessing @code{struct curl_certinfo}


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-certinfo.certinfo @var{pointer}
Given a pointer to an instance of @code{struct curl_certinfo}: return a
vector holding one item for each certificate in the structure; each item
is a list of strings representing informations about the certificate;
each string has the format @code{name:value}.

Notice that when using @func{curl-easy-getinfo} with the
@code{CURLINFO_CERTINFO} option: the returned value is already the
vector of lists of strings.
@end defun

@c page
@node plain cstructs msg
@subsection Accessing @code{struct CURLMsg}


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-msg.msg @var{pointer}
Given a pointer to an instance of @code{struct CURLMsg}, return an exact
integer representing the value of the field @code{CURLMSG msg}.
@end defun


@defun curl-msg.easy_handle @var{pointer}
Given a pointer to an instance of @code{struct CURLMsg}, return a
temporary instance of @code{curl-easy} referencing the value of the
field @code{CURL *easy_handle}.
@end defun


@defun curl-msg.data.whatever @var{pointer}
Given a pointer to an instance of @code{struct CURLMsg}, return a
pointer object representing the value of the field @code{void *
whatever} in the union @code{data}.
@end defun


@defun curl-msg.data.result @var{pointer}
Given a pointer to an instance of @code{struct CURLMsg}, return an exact
integer representing the value of the field @code{CURLcode result} in
the union @code{data}.
@end defun

@c page
@node plain misc
@section Miscellaneous functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-free @var{pointer}
Release memory allocated through a call to the @curl{} library; return
unspecified values.  @curlman{curl_free}.

@var{pointer} must be @false{} or a pointer object; when @var{pointer}
is neither @false{} nor @cnull{}: @var{pointer} is mutated to represent
the @cnull{} pointer.

It is safe to apply this function multiple times to the same
@var{pointer}.
@end defun


@defun curl-escape @var{str.data}
@defunx curl-escape @var{str.data} @var{str.len}
Obsolete function.  Escape all the characters in the input string to
make it ready to be an @aurl{} component; if successful return a
bytevector holding the @ascii{} encoding of the string, else return
@false{}.  @curlman{curl_escape}.

@var{str.data} and @var{str.len} must represent a generalised C string,
@cstringsref{}.  It must hold the representation of an @ascii{} string.
@end defun


@defun curl-escape/string @var{str.data}
@defunx curl-escape/string @var{str.data} @var{str.len}
Like @func{curl-escape} but return a Scheme string.
@end defun


@defun curl-unescape @var{str.data}
@defunx curl-unescape @var{str.data} @var{str.len}
Obsolete function.  Unescape all the characters in the input string as
if it comes from a @aurl{} component; if successful return a bytevector
holding the @ascii{} encoding of the string, else return @false{}.
@curlman{curl_unescape}.

@var{str.data} and @var{str.len} must represent a generalised C string,
@cstringsref{}.  It must hold the representation of an @ascii{} string.
@end defun


@defun curl-unescape/string @var{str.data}
@defunx curl-unescape/string @var{str.data} @var{str.len}
Like @func{curl-unescape} but return a Scheme string.
@end defun


@defun curl-getdate @var{date}
Convert a date string to the the number of seconds since the Epoch.
@curlman{curl_getdate}.

@var{date} must represent a generalised C string, @cstringsref{}.  It
must represent an @asciiz{} string.

@example
(import (vicare)
  (vicare net curl))

(curl-getdate "Sun Nov 6 94")
@result{} 784080000
@end example
@end defun

@c page
@node plain symbols
@section Constant to symbol conversions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-constant-httppost->symbol @var{code}
Given one among the @code{HTTPPOST_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-filetype->symbol @var{code}
Given one among the @code{CURLFILETYPE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-infoflag->symbol @var{code}
Given one among the @code{CURLFINFOFLAG_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-chunk-bgn->symbol @var{code}
Given one among the @code{CURL_CHUNK_BGN_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-chunk-end->symbol @var{code}
Given one among the @code{CURL_CHUNK_END_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-fnmatch->symbol @var{code}
Given one among the @code{CURL_FNMATCHFUNC_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-seekfunc->symbol @var{code}
Given one among the @code{CURL_SEEKFUNC_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-readfunc->symbol @var{code}
Given one among the @code{CURL_READFUNC_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-socktype->symbol @var{code}
Given one among the @code{CURLSOCKTYPE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-sockopt->symbol @var{code}
Given one among the @code{CURL_SOCKOPT_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ioe->symbol @var{code}
Given one among the @code{CURLIOE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-iocmd->symbol @var{code}
Given one among the @code{CURLIOCMD_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-info-debug->symbol @var{code}
Given one among the @code{CURLINFO_TEXT}, @code{CURLINFO_HEADER_IN},
@code{CURLINFO_HEADER_OUT}, @code{CURLINFO_DATA_IN},
@code{CURLINFO_DATA_OUT}, @code{CURLINFO_SSL_DATA_IN},
@code{CURLINFO_SSL_DATA_OUT}, @code{CURLINFO_END} constants return a
symbol representing its name.
@end defun


@defun curl-constant-e->symbol @var{code}
Given one among the @code{CURLE_} constants return a symbol representing
its name.
@end defun


@defun curl-constant-proxy->symbol @var{code}
Given one among the @code{CURLPROXY_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-auth->symbol @var{code}
Given one among the @code{CURLAUTH_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ssh->symbol @var{code}
Given one among the @code{CURLSSH_AUTH_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-gssapi-delegation->symbol @var{code}
Given one among the @code{CURLGSSAPI_DELEGATION_} constants return a
symbol representing its name.
@end defun


@defun curl-constant-khtype->symbol @var{code}
Given one among the @code{CURLKHTYPE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-khstat->symbol @var{code}
Given one among the @code{CURLKHSTAT_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-khmatch->symbol @var{code}
Given one among the @code{CURLKHMATCH_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-use-ssl->symbol @var{code}
Given one among the @code{CURLUSESSL_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ftp-ssl-ccc->symbol @var{code}
Given one among the @code{CURLFTPSSL_CCC_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ftp-auth->symbol @var{code}
Given one among the @code{CURLFTPAUTH_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ftp-create-dir->symbol @var{code}
Given one among the @code{CURLFTP_CREATE_DIR_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ftp-method->symbol @var{code}
Given one among the @code{CURLFTPMETHOD_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-proto->symbol @var{code}
Given one among the @code{CURLPROTO_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-opt-type->symbol @var{code}
Given one among the @code{CURLOPTTYPE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-opt->symbol @var{code}
Given one among the @code{CURLOPT_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ip-resolve->symbol @var{code}
Given one among the @code{CURL_IPRESOLVE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-http-version->symbol @var{code}
Given one among the @code{CURL_HTTP_VERSION_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-rts-preq->symbol @var{code}
Given one among the @code{CURL_RTSPREQ_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-netrc->symbol @var{code}
Given one among the @code{CURL_NETRC_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-ssl-version->symbol @var{code}
Given one among the @code{CURL_SSLVERSION_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-tls-auth->symbol @var{code}
Given one among the @code{CURL_TLSAUTH_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-redir->symbol @var{code}
Given one among the @code{CURL_REDIR_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-time-cond->symbol @var{code}
Given one among the @code{CURL_TIMECOND_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-form->symbol @var{code}
Given one among the @code{CURLFORM_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-form-add->symbol @var{code}
Given one among the @code{CURL_FORMADD_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-info-type->symbol @var{code}
Given one among the @code{CURLINFO_STRING}, @code{CURLINFO_LONG},
@code{CURLINFO_DOUBLE}, @code{CURLINFO_SLIST}, @code{CURLINFO_MASK},
@code{CURLINFO_TYPEMASK} constants return a symbol representing its
name.
@end defun


@defun curl-constant-info->symbol @var{code}
Given one among the @code{CURLINFO_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-close-policy->symbol @var{code}
Given one among the @code{CURLCLOSEPOLICY_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-global->symbol @var{code}
Given one among the @code{CURL_GLOBAL_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-lock-data->symbol @var{code}
Given one among the @code{CURL_LOCK_DATA_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-lock-access->symbol @var{code}
Given one among the @code{CURL_LOCK_ACCESS_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-she->symbol @var{code}
Given one among the @code{CURLSHE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-shopt->symbol @var{code}
Given one among the @code{CURLSHOPT_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-version-num->symbol @var{code}
Given one among the @code{CURLVERSION_FIRST}, @code{CURLVERSION_SECOND},
@code{CURLVERSION_THIRD}, @code{CURLVERSION_FOURTH},
@code{CURLVERSION_LAST}, @code{CURLVERSION_NOW} constants return a
symbol representing its name.
@end defun


@defun curl-constant-version->symbol @var{code}
Given one among the @code{CURL_VERSION_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-pause->symbol @var{code}
Given one among the @code{CURLPAUSE_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-m->symbol @var{code}
Given one among the @code{CURLM_} constants return a symbol representing
its name.
@end defun


@defun curl-constant-msg->symbol @var{code}
Given one among the @code{CURLMSG_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-poll->symbol @var{code}
Given one among the @code{CURL_POLL_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-wait-poll->symbol @var{code}
Given one among the @code{CURL_WAIT_POLL} constants return a symbol
representing its name.
@end defun


@defun curl-constant-cselect->symbol @var{code}
Given one among the @code{CURL_CSELECT_} constants return a symbol
representing its name.
@end defun


@defun curl-constant-mopt->symbol @var{code}
Given one among the @code{CURLMOPT_} constants return a symbol
representing its name.
@end defun

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @value{DOCUMENTATION_URL}

@noindent
the latest version of this package can be downloaded from:

@center @value{DOWNLOAD_URL}

@noindent
development takes place at:

@center @value{GITHUB_URL}

@noindent
the home page of the Vicare project is at:

@center @value{VICARE_HOMEPAGE_URL}

@noindent
@value{FOREIGN_PACKAGE} can be found here:

@center @value{FOREIGN_URL}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

