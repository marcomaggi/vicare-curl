\input texinfo.tex
@c %**start of header
@setfilename vicare-curl.info
@settitle cURL for Vicare
@c %**end of header

@include version.texi
@include macros.texi

@macro curl{}
cURL
@end macro

@macro curlman{FUNC}
@xref{\FUNC\,\FUNC\,\FUNC\,*manpages*}
@end macro

@c page
@c ------------------------------------------------------------
@c Values.
@c ------------------------------------------------------------

@set TITLE                      Libcurl for Vicare

@c To be used as @value{PACKAGE} whenever we need to include the full
@c name of this package.
@set PACKAGE                    Vicare/cURL

@c To be used as @value{PACKAGE} whenever we need to include the
@c nickname of the project: the name that is used to compose the
@c distribution tarball or the web address.
@set PACKAGE_NICKNAME           vicare-curl

@c To be used as @value{AUTHOR} whenever we need to include the list of
@c authors of this document.
@set AUTHOR                     Marco Maggi

@c To be used as @value{AUTHOR_EMAIL} whenever we need to include the
@c email of the *single* author of this document.
@set AUTHOR_EMAIL               @email{marco.maggi.ipsu@@poste.it}

@c To be used as @value{COPYRIGHT_YEARS} whenever we need to include the
@c list of copyright years.
@set COPYRIGHT_YEARS            2012


@c page
@c ------------------------------------------------------------
@c Copyright notice.
@c ------------------------------------------------------------

@copying
This document describes version @version{} of @value{PACKAGE}, a
distribution of C and Scheme libraries for Vicare Scheme, an @rnrs{6}
compliant Scheme implementation; it provides bindings for the @curl{} C
language library.

@curl{} is a tool to transfer data from or to a server, using one of the
supported protocols (@http{}, @acronym{HTTPS}, @ftp{}, @acronym{FTPS},
@acronym{TFTP}, @acronym{DICT}, @acronym{TELNET}, @acronym{LDAP} or
@acronym{FILE}).

The package is distributed under the terms of the @gnu{} General Public
License (@gpl{}) and can be downloaded from:

@center @url{http://github.com/marcomaggi/@value{PACKAGE_NICKNAME}}

@noindent
the @curl{} library is available at:

@center @url{http://curl.haxx.se/libcurl/}

@noindent
Copyright @copyright{} @value{COPYRIGHT_YEARS} by @value{AUTHOR} @value{AUTHOR_EMAIL}

@quotation
Permission is granted to copy, distribute and/or modify this document
under the terms of the @gnu{} Free Documentation License, Version 1.3 or
any later version published by the Free Software Foundation; with
Invariant Sections being ``@gnu{} Free Documentation License'' and
``@gnu{} General Public License'', no Front--Cover Texts, and no
Back--Cover Texts.  A copy of the license is included in the section
entitled ``@gnu{} Free Documentation License''.
@end quotation
@end copying

@c page
@c ------------------------------------------------------------
@c Headers.
@c ------------------------------------------------------------

@titlepage
@title @value{TITLE}
@subtitle Revision @version{}
@author @value{AUTHOR} @value{AUTHOR_EMAIL}
@page
@vskip 0pt plus 1filll
@insertcopying
@end titlepage

@c ------------------------------------------------------------

@ifinfo
@dircategory Development
@direntry
* vicare-curl: (vicare-curl). @value{TITLE}.
@end direntry
@end ifinfo

@c ------------------------------------------------------------

@ignore
@syncodeindex tp cp
@syncodeindex vr cp
@syncodeindex fn cp
@end ignore

@c page
@ifnottex
@node Top
@top @value{TITLE}

@insertcopying

@menu
* overview::                    Overview of the package.
* plain::                       Plain interface.

Appendices

* Package License::             GNU General Public License.
* Documentation License::       GNU Free Documentation License.
* references::                  Bibliography and references.

Indexes

* concept index::               An entry for each concept.
* function index::              An entry for each function.
* variable index::              An entry for each variable.
* type index::                  An entry for each type.
@end menu
@end ifnottex

@c page
@node overview
@chapter Overview of the package


Vicare Scheme is an @rnrs{6} compliant Scheme language implementation in
the form of a native compiler for x86 architectures, officially
supporting @gnu{}+Linux systems.  @value{PACKAGE} is a distribution of C
language and Scheme language libraries for Vicare Scheme; it provides
bindings for the @curl{} C language library.

@curl{} is a tool to transfer data from or to a server, using one of the
supported protocols (@http{}, @acronym{HTTPS}, @ftp{}, @acronym{FTPS},
@acronym{TFTP}, @acronym{DICT}, @acronym{TELNET}, @acronym{LDAP} or
@acronym{FILE}).

The last time the author bothered to update this paragraph, he had
tested @curl{} version 7.27.0; the @curl{} library is available at:

@center @url{http://curl.haxx.se/libcurl/}

The package installs a C language library implementing wrapper C
functions for the C language @curl{} library; on top of this, the Scheme
library @library{vicare net curl} exports one binding for each @curl{}
public function; additionally the library @library{vicare net curl
constants} exports one binding for each constant value defined in the C
language header @file{curl/curl.h}.

The following Scheme libraries are installed:

@table @library
@item vicare net curl
It exports one binding for each @curl{} public function.  All the Scheme
function names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{curl_global_init} becomes @func{curl-global-init}.

@item vicare net curl unsafe-capi
It exports one syntax binding for each @curl{} public function.  All the
Scheme syntax names are directly derived from the C function names by
replacing underscore characters @samp{_} with dash characters @samp{-};
so @cfunc{curl-global-init} becomes @func{curl-global-init}.

These syntaxes expand to a direct call to the C language wrapper
functions in the @value{PACKAGE} library; they are not meant to be
called in normal usage of the package.

@item vicare net curl constants
It exports one binding for each constant value defined in the C language
header @file{curl/curl.h}.

@item vicare net curl features
It exports one identifier syntax binding for each @code{HAVE_} constant
defined by the @command{configure} script, expanding to @true{} or
@false{}.
@end table

After installation, under the directory @code{$libexecdir/$PACKAGE}, a
script @file{compile-all.sps} can be executed to precompile the
installed libraries; for example:

@example
$ sudo vicare \
   --fasl-directory /var/cache/vicare-scheme \
   --compile-dependencies \
      /usr/local/libexec/vicare-curl/compile-all.sps
@end example

This document contains only a brief description of the functions: refer
to the @curl{}'s documentation for details.

@c page
@node plain
@chapter Plain interface


@cindex @library{vicare net curl}, library
@cindex Library @library{vicare net curl}

@menu
* plain version::               @curl{} version informations.
* plain init::                  Global initialisation and
                                finalisation.
* plain easy::                  Easy operations.
* plain callbacks::             Callback makers.
* plain slists::                String lists.
* plain forms::                 Multipart/formdata composition.
* plain shares::                Shared configuration option sets.
* plain misc::                  Miscellaneous functions.
* plain debug::                 Debugging facilities.
@end menu

@c page
@node plain version
@section @curl{} version informations


The installed C library follows version numbering as established by the
@gnu{} Autotools.  For an explanation of interface numbers as managed by
@gnu{} Libtool @xref{Libtool versioning, interface, Libtool's versioning
system, libtool, Shared library support for @gnu{}}.

The following bindings are exported by the library @library{vicare net
curl}.


@defun vicare-curl-version-interface-current
@defunx vicare-curl-version-interface-revision
@defunx vicare-curl-version-interface-age
Return a fixnum representing a version number.
@end defun


@defun vicare-curl-version
Return a Scheme string representing the versio number.
@end defun


@defun curl-version
Return a string representing the version of @curl{};
@curlman{curl_version}.

@example
(import (vicare)
  (vicare net curl))

(curl-version)
@result{} "libcurl/7.27.0 OpenSSL/0.9.8n zlib/1.2.5 libidn/1.12"
@end example
@end defun


@deftp {Struct Type} curl-version-info-data
Data structure mirroring the C language type
@code{curl_version_info_data}.  It has the following fields:

@table @code
@item age
Exact integer, age of the returned struct.

@item version
An exact integer representing a @code{LIBCURL_VERSION} constant.

@item version-num
An exact integer representing the @code{LIBCURL_VERSION_NUM} constant.

@item host
@false{} or a stirng representing OS/host/cpu/machine when the package
was configured.

@item features
An exact integer representing a bitmask of @code{CURL_VERSION_}
constants.

@item ssl-version
@false{} or a human readable string.

@item ssl-version-num
Not used anymore, always @code{0}.

@item libz-version
@false{} or a human readable string.

@item protocols
A list of protocol strings.

@item ares
@false{} or a string.

@item ares-num
An exact integer.

@item libidn
@false{} or a string.

@item iconv-ver-num
An exact integer, same as @code{_libiconv_version} if @curl{} was built
with @code{HAVE_ICONV}.

@item libssh-version
@false{} or a human readable string.
@end table
@end deftp


@defun curl-version-info-data? @var{obj}
Return @true{} if @var{obj} is an instance of
@code{curl-version-info-data}.
@end defun


@defun curl-version-info-data-age @var{info}
@defunx curl-version-info-data-version @var{info}
@defunx curl-version-info-data-version-num @var{info}
@defunx curl-version-info-data-host @var{info}
@defunx curl-version-info-data-features @var{info}
@defunx curl-version-info-data-ssl-version @var{info}
@defunx curl-version-info-data-ssl-version-num @var{info}
@defunx curl-version-info-data-libz-version @var{info}
@defunx curl-version-info-data-protocols @var{info}
@defunx curl-version-info-data-ares @var{info}
@defunx curl-version-info-data-ares-num @var{info}
@defunx curl-version-info-data-libidn @var{info}
@defunx curl-version-info-data-iconv-ver-num @var{info}
@defunx curl-version-info-data-libssh-version @var{info}
Accessors for the fields of @code{curl-version-info-data} instances.
@end defun


@defun curl-version-info @var{version-code}
Return an instance of @code{curl-version-info-data} representing the
version number of the features with which @curl{} was built.
@curlman{curl_version_info}.


@var{version-code} must be a non--negative fixnum representing one of
the @code{CURLVERSION_} constants, with @code{CURLVERSION_NOW}
representing the current version.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-info CURLVERSION_NOW)
@result{} #[curl-version-info-data
   age=3
   version="7.27.0"
   version-num=465664
   host="i686-pc-linux-gnu"
   features=(CURL_VERSION_NTLM_WB
             CURL_VERSION_IDN
             CURL_VERSION_LARGEFILE
             CURL_VERSION_NTLM
             CURL_VERSION_LIBZ
             CURL_VERSION_SSL
             CURL_VERSION_IPV6)
   ssl-version="OpenSSL/0.9.8n"
   ssl-version-num=0
   libz-version="1.2.5"
   protocols=("tftp"    "telnet"   "smtps"
              "smtp"    "rtsp"     "pop3s"
              "pop3"    "ldaps"    "ldap"
              "imaps"   "imap"     "https"
              "http"    "gopher"   "ftps"
              "ftp"     "file"     "dict")
   ares=#f
   ares-num=0
   libidn="1.12"
   iconv-ver-num=0
   libssh-version=#f]
@end example
@end defun


@defun curl-version-info-features->symbols @var{info}
Given an instance of @code{curl-version-info-data}, extract the
@code{features} field and convert it into a list of symbols representing
the @code{CURL_VERSION_} constants.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-info-features->symbols
   (curl-version-info CURLVERSION_NOW))
@result{} (CURL_VERSION_NTLM_WB
    CURL_VERSION_IDN
    CURL_VERSION_LARGEFILE
    CURL_VERSION_NTLM
    CURL_VERSION_LIBZ
    CURL_VERSION_SSL
    CURL_VERSION_IPV6)
@end example
@end defun


@defun curl-version-feature? @var{info} @var{feature}
Given an instance of @code{curl-version-info-data}, extract the
@code{features} field and bitwise AND it @var{feature}, which must be an
exact integer representing a @code{CURL_VERSION_} constant; return
@true{} if the @var{feature} bit is set.

@example
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(curl-version-feature? (curl-version-info CURLVERSION_NOW)
                       CURL_VERSION_LIBZ)
@result{} #t
@end example
@end defun

@c page
@node plain init
@section Global initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-global-init @var{flags}
Perform global initialisation for the @curl{} library; if successful
return @code{CURLE_OK}, else return a @code{CURLE_} error code.
@curlman{curl_global_init}.

@var{flags} must be an exact integer representing @code{CURL_GLOBAL_ALL}
or the bitwise inclusive OR combination of: @code{CURL_GLOBAL_SSL},
@code{CURL_GLOBAL_WIN32}, @code{CURL_GLOBAL_NOTHING}.
@end defun


@defun curl-global-init-mem @var{flags} @var{malloc} @var{free} @var{realloc} @var{strdup} @var{calloc}
Like @func{curl-global-init}, but allows the application to replace the
functions used by @curl{} to manage raw memory with supplied callbacks.
@end defun


@defun make-curl-malloc-callback @var{malloc}
@defunx make-curl-free-callback @var{free}
@defunx make-curl-realloc-callback @var{realloc}
@defunx make-curl-strdup-callback @var{strdup}
@defunx make-curl-calloc-callback @var{calloc}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as argument in calls
to @func{curl-global-init-mem}; the returned pointer must be released
with a call to @func{free-c-callback} from @library{vicare ffi}.

Each supplid Scheme function must adhere to appropriate prototype among
the following:

@example
void * curl_malloc_callback  (size_t size);
void   curl_free_callback    (void *ptr);
void * curl_realloc_callback (void *ptr, size_t size);
char * curl_strdup_callback  (const char *str);
void * curl_calloc_callback  (size_t nmemb, size_t size);
@end example

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{malloc}, @var{realloc}, @var{calloc} or @var{strdup} raise an
exception: the raised object is discarded and the callback returns the
return value of @func{null-pointer}.

@item
If @var{free} raises an exception: the raised object is discarded and
the callback returns the return value of @func{void}.
@end itemize
@end defun


@defun curl-global-cleanup
Releases the resources allocated by @func{curl-global-init} or
@func{curl-global-init-mem}; return unspecified values.
@curlman{curl-global-cleanup}.
@end defun


The following is a meaningless example of selecting custom functions to
handle raw memory allocation:

@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants)
  (prefix (vicare ffi) ffi.))

(curl-global-init-mem CURL_GLOBAL_ALL
   (make-curl-malloc-callback  malloc)
   (make-curl-free-callback    free)
   (make-curl-realloc-callback realloc)
   (make-curl-strdup-callback  strdup)
   (make-curl-calloc-callback  calloc))
@result{} CURLE_OK
@end example

@c page
@node plain easy
@section Easy operations


@menu
* plain easy struct::           Easy operations handle.
* plain easy init::             Easy initialisation and finalisation.
* plain easy config::           Selecting options for easy operations.
* plain easy ops::              Performing easy operations.
* plain easy data::             Sending and receiving data.
* plain easy escape::           Escaping @aurl{} strings.
* plain easy misc::             Miscellaneous functions.
@end menu

@c page
@node plain easy struct
@subsection Easy operations handle


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-easy
@cindex Argument @var{easy}
@cindex @var{easy} argument
Opaque structure type referencing an instance of the C language type
@code{CURL}.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{easy}.

Instances of this type must be finalised with @func{curl-easy-cleanup};
whenever an instance of this type is garbage collected:
@func{curl-easy-cleanup} is automatically applied to it and any error
ignored.

In certain contexts, instances of this type own the referenced
@code{CURL} value, in other contexts they do not:

@itemize
@item
Finalising a @code{curl-easy} instance owning the @code{CURL} value,
causes finalisation of the @code{CURL} value too.

@item
Finalising a @code{curl-easy} instance @strong{not} owning the
@code{CURL} value, leaves the @code{CURL} untouched.
@end itemize

@noindent
this should happen transparently.
@end deftp


@defun curl? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-easy}.
@end defun


@defun curl?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-easy} and it
has not been finalised.
@end defun


@defun curl-easy-destructor @var{easy}
@defunx set-curl-easy-destructor! @var{easy} @var{func}
Retrieve or set a destructor function associated to @var{easy}.

Whenever @var{easy} is finalised, either explicitly with
@func{curl-easy-cleanup} or implicitly by the garbage collector,
@var{func} is applied to @var{easy} before the internal state of
@var{easy} is destroyed.

Notice that @var{func} can be used to associate some state to
@var{easy}, for example, by doing:

@example
(define easy ...)

(set-curl-easy-destructor! easy
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((easy)
       (destroy state))
      (()
       state))))

(let ((state ((curl-easy-destructor easy))))
  (do-something-with easy state))
@end example
@end defun

@c page
@node plain easy init
@subsection Easy initialisation and finalisation


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-init
Build a new instance of @code{curl-easy} owning the referenced
@code{CURL} value; if successful return the new instance, else return
@false{}.  @curlman{curl_easy_init}.
@end defun


@defun curl-easy-cleanup @var{easy}
Finalise @var{easy}; return unspecified values.
@curlman{curl_easy_cleanup}.

It is fine to apply this function multiple times to the same @var{easy}
value: the first time the underlying session data is finalised, the
subsequent times nothing happens.

If this function is applied to an @var{easy} value not owning the
underlying @code{CURL} value: @var{easy} is finalised, but the
@code{CURL} value is left alone.
@end defun


@defun curl-easy-reset @var{easy}
Reinitialise all the options associated to @var{easy}; return
unspecified values.  @curlman{curl_easy_reset}.
@end defun

@c page
@node plain easy config
@subsection Selecting options for easy operations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-setopt @var{easy} @var{option} @var{parameter}
Set an option for the @var{easy} handle; if successful return
@code{CURLE_OK}, if @var{option} is invalid return @false{}, else return
a @code{CURLE_} error code.  @curlman{curl_easy_setopt}.

@var{option} must be an exact integer representing one of the
@code{CURLOPT_} constants.

The type of @var{parameter} depends upon the selected @var{option}
value; it can be one among: an exact integer representing a C language
type @code{long} or @code{off_t}; a pointer object referencing a
callback function; a string or @ascii{} bytevector or pointer object or
@code{memory-block} referencing some data.
@end defun


@defun curl-easy-getinfo @var{easy} @var{info}
Extract informations from an @var{easy} handle; return @math{2} values:

@itemize
@item
If successful @code{CURLE_OK} and a value representing the requested
information.

@item
If @var{info} is not recognised: @false{} and @false{}.

@item
Else return: a @code{CURLE_} constant and @false{}.
@end itemize

@curlman{curl_easy_getinfo}.

@var{info} must be one of the @code{CURLINFO_} constants.
@end defun

@c page
@node plain easy ops
@subsection Performing easy operations


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-perform @var{easy}
Perform a file transfer; if successful return @code{CURLE_OK}, else
return a @code{CURLE_} error code.  @curlman{curl_easy_perform}.
@end defun


@defun curl-easy-duphandle @var{easy}
Clone an session handle; if successful return a new instance of
@code{curl-easy}, else return @false{}.  @curlman{curl_easy_duphandle}.
@end defun


@defun curl-easy-pause @var{easy} @var{bitmask}
Pause and unpause a session; if successful return @code{CURLE_OK}, else
return a @code{CURLE_} error code.  @curlman{curl_easy_pause}.

@var{bitmask} must be the fixnum zero or the bitwise inclusive OR
combination of the @code{CURLPAUSE_} constants: @code{CURLPAUSE_RECV},
@code{CURLPAUSE_SEND}, @code{CURLPAUSE_ALL}, @code{CURLPAUSE_CONT}.
@end defun

@c page
@node plain easy data
@subsection Sending and receiving data


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-recv @var{easy} @var{buffer.data}
@defunx curl-easy-recv @var{easy} @var{buffer.data} @var{buffer.len}
Receive raw data from an @var{easy} handle; return @math{2} values:

@itemize
@item
If successful @code{CURLE_OK} and an exact integer representing the
number of bytes received in the output buffer.

@item
Else a @code{CURLE_} error code and @false{}.
@end itemize

@curlman{curl_easy_recv}.

@var{buffer.data} must be a bytevector or pointer object or
@code{memory-block}; it is the output buffer in which received data will
be written.

The optional @var{buffer.len} is used only when @code{buffer.data} is a
pointer object, in the other cases it is ignored; when used, it must be
an exact integer, in the range of the C language type @code{size_t},
representing the number of free bytes available in the output buffer.
@end defun


@defun curl-easy-send @var{easy} @var{buffer.data}
@defunx curl-easy-send @var{easy} @var{buffer.data} @var{buffer.len}
Send raw data to an @var{easy} handle; return @math{2} values:

@itemize
@item
If successful @code{CURLE_OK} and an exact integer representing the
number of bytes sent from the input buffer.

@item
Else a @code{CURLE_} error code and @false{}.
@end itemize

@curlman{curl_easy_send}.

@var{buffer.data} must be a string, bytevector, pointer object or
@code{memory-block}; it is the input buffer in which received data will
be written; the string is converted to a bytevector with
@code{string->utf8}.

The optional @var{buffer.len} is used only when @code{buffer.data} is a
pointer object, in the other cases it is ignored; when used, it must be
an exact integer, in the range of the C language type @code{size_t},
representing the number of bytes available in the input buffer to be
sent.
@end defun

@c page
@node plain easy escape
@subsection Escaping @aurl{} strings


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-escape @var{easy} @var{chars.data}
@defunx curl-easy-escape @var{easy} @var{chars.data} @var{chars.len}
Encode the given string to become a portion of @aurl{}; if successful
return an @ascii{} bytevector, else return @false{}.
@curlman{curl_easy_escape}.

@var{chars.data} must be a string or bytevector or pointer object or
@code{memory-block}; it must hold the input data.

The optional @var{chars.len} is used only when @code{chars.data} is a
pointer object, in the other cases it is ignored; when used, it must be
an exact integer, in the range of the C language type @code{int},
representing the number of bytes available in the input buffer.
@end defun


@defun curl-easy-escape/string @var{easy} @var{chars.data}
@defunx curl-easy-escape/string @var{easy} @var{chars.data} @var{chars.len}
Like @func{curl-easy-escape}, but return a string.
@end defun


@defun curl-easy-unescape @var{easy} @var{chars.data} @var{chars.len}
Decode the given string as if it comes from a portion of @aurl{}; if
successful return an @ascii{} bytevector, else return @false{}.
@curlman{curl_easy_unescape}.

@var{chars.data} must be a string or bytevector or pointer object or
@code{memory-block}; it must hold the input data.

The optional @var{chars.len} is used only when @code{chars.data} is a
pointer object, in the other cases it is ignored; when used, it must be
an exact integer, in the range of the C language type @code{int},
representing the number of bytes available in the input buffer.
@end defun


@defun curl-easy-unescape/string @var{easy} @var{chars.data}
@defunx curl-easy-unescape/string @var{easy} @var{chars.data} @var{chars.len}
Like @func{curl-easy-unescape}, but return a string.
@end defun

@c page
@node plain easy misc
@subsection Miscellaneous functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-easy-strerror @var{code}
Return a string representing the description of the given @code{CURLE_}
error code; if @var{code} is invalid, return @false{}.
@curlman{curl_easy_strerror}.
@end defun

@c page
@node plain callbacks
@section Callback makers


@menu
* plain callbacks progress::    Tracking file transfer progress.
* plain callbacks undoc::       Callback makers still undocumented.
@end menu

@c page
@node plain callbacks progress
@subsection Tracking file transfer progress


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-progress-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_progress_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

This callback is associated to @code{curl-easy} instances with the
@code{CURLOPT_PROGRESSFUNCTION} option of @func{curl-easy-setopt}; a
custom data pointer is associated to the callback with the
@code{CURLOPT_PROGRESSDATA} option of @func{curl-easy-setopt}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
@false{} or a pointer object referencing an application selected value;
such value is chosen at callback registration time.

@item
A flonum representing the total download size.

@item
A flonum representing the current download size.

@item
A flonum representing the total upload size.

@item
A flonum representing the current upload size.
@end enumerate

@var{user-scheme-callback} must return a single value which is the
answer to the question ``Abort the transfer?''; when the returned value
is true the transfer is aborted, else the transfer will proceed.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.

@item
When @var{user-scheme-callback} returns true: the value returned to the
callback caller is @code{1}; else the value returned is @code{0}.
@end itemize
@end defun


@c page
@node plain callbacks undoc
@subsection Callback makers still undocumented


@defun make-curl-write-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_write_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-chunk-begin-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_chunk_bgn_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@defun make-curl-chunk-end-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_chunk_end_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-fnmatch-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_fnmatch_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-seek-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_seek_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-read-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_read_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-sockopt-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_sockopt_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize

@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-opensocket-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_opensocket_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-closesocket-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_closesocket_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the

callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-ioctl-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_ioctl_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-debug-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_debug_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item

Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-conf-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_conf_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-ssl-ctx-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_ssl_ctx_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@defun make-curl-sshkey-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_sshkey_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-socket-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_socket_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun


@defun make-curl-multi-timer-callback @var{user-scheme-callback}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as
@code{curl_multi_timer_callback} callback; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-callback} must accept @math{5} arguments:

@enumerate
@item
A pointer object referencing an application selected value; such value
is chosen at callback registration time.
@end enumerate

@var{user-scheme-callback} must return a single value

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; when an exception is catched: it is discarded and the
callback returns @code{0} to the caller.  @var{user-scheme-callback}
should take care of handling its own exceptions.
@end itemize
@end defun

@c page
@node plain slists
@section String lists


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-slist-append @var{string}
@defunx curl-slist-append @var{slist} @var{string}
Add a string to a list of strings, possibly creating a new list; if
successful return a pointer object representing the head of the list,
else return @false{}.  @curlman{curl_slist_append}.

The returned list must be released by @func{curl-slist-free-all}.

@var{slist} must be @false{} or a pointer object.  When @var{slist} is
@false{} or the @cnull{} pointer or not given: a new list is allocated.

@var{string} must be a string, @ascii{} bytevector, pointer or
@code{memory-block}.

@example
#!r6rs
(import (vicare)
  (vicare net curl))

;; assuming no error occurs
(let* ((slist (curl-slist-append "ciao"))
       (slist (curl-slist-append slist "hello"))
       (slist (curl-slist-append slist "salut")))
  (curl-slist-free-all slist)
  slist)
@result{} #<pointer #x00000000>
@end example
@end defun


@defun curl-slist-free-all @var{slist}
Release all the resources associated to @var{slist}, which must be the
return value of a previous call to @func{curl-slist-append}; return
unspecified values.  @curlman{curl_slist_free_all}.

@var{slist} must be @false{} or a pointer.  When @var{slist} is @false{}
or a @cnull{} pointer: nothing happens.  When @var{slist} is a
non--@cnull{} pointer: @var{slist} itself is mutated to represent
@cnull{}.

It is safe to apply this function multiple times to the same @var{slist}
argument.
@end defun


@defun curl-slist->list @var{slist}
@defunx list->curl-slist @var{list-of-strings}
Convert a list of strings to and from a @code{curl-list}.
@end defun

@c page
@node plain forms
@section Multipart/formdata composition


@menu
* plain forms structs::         @http{} post data structures.
* plain forms adding::          Adding data to @http{} post.
* plain forms inspect::         Inspecting @http{} post data.
@end menu

@c page
@node plain forms structs
@subsection @http{} post data structures


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-form-data
@cindex @var{httppost} argument
@cindex Argument @var{httppost}
Opaque structure type referencing the first element in a C language
@code{struct curl_httppost} chain.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{httppost}.

Instances of this type must be finalised with @func{curl-formfree}.
Whenever an instance of this type is garbage collected:
@func{curl-formfree} is automatically applied to it.
@end deftp


@defun curl-form-data? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-form-data}.
@end defun


@defun curl-form-data?/filled @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-form-data} and
it holds some contents.
@end defun


@defun make-curl-form-data
Build and return a new instance of @code{curl-form-data} ready to be
handed to @func{curl-formadd}.
@end defun


@defun curl-formfree @var{httppost}
Release all the resources associated to @var{httppost}, which must be an
instance of @code{curl-form-data}; return unspecified values.
@curlman{curl_formfree}.

It is safe to apply this function multiple times to the same
@var{httppost} argument: the first time the data is finalised, the
subsequent times nothing happens.
@end defun


@defun curl-form-data-destructor @var{httppost}
@defunx set-curl-form-data-destructor! @var{httppost} @var{func}
Retrieve or set a destructor function associated to the @var{httppost}.

Whenever the @var{httppost} is finalised, either explicitly with
@func{curl-formfree} or implicitly by the garbage collector, @var{func}
is applied to @var{httppost} before the internal state of @var{httppost}
is finalised.

Notice that @var{func} can do anything, not only destroy some state
associated to @var{httppost}; if we do:

@example
(define httppost ...)
(set-curl-form-data-destructor! httppost
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((httppost)
       (destroy state))
      (()
       state))))

(let ((state ((curl-form-data-destructor httppost))))
  (do-something-with httppost state))
@end example

@noindent
we can easily associate values to @var{httppost}.
@end defun

@c page
@node plain forms adding
@subsection Adding data to @http{} post


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @var{end}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @varii{opt} @varii{val}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @varii{opt} @varii{val} @var{end}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val} @var{end}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val} @variv{opt} @variv{val}
@defunx curl-formadd @var{httppost} @var{last} @vari{opt} @vari{val} @varii{opt} @varii{val} @variii{opt} @variii{val} @variv{opt} @variv{val} @var{end}
Add a section to a multipart/formdata @http{} @acronym{POST}; if
successful return @code{CURL_FORMADD_OK}, else return a
@code{CURL_FORMADD_} error code.  @curlman{curl_formadd}.

@var{httppost} must be an instance of @code{curl-form-data}; at the
first invocation of this function @var{httppost} must be the return
value of @func{make-curl-form-data}.

@var{last} must be a pointer object; the first time this function is
called to compose data, it must be @cnull{} (the return value of
@func{null-pointer}); this function mutates @var{last} to reference the
last item in the composed data.

Each @var{opt}/@var{val} couple must be an option/value couple in which
@var{opt} is one of the @code{CURLFORM_} constants and @var{val} is one
among: an exact integer in the range of the C language type @code{long},
a string, an @ascii{} bytevector, a pointer, a @code{memory-block}.

When present @var{end} must be the constant @code{CURLFORM_END}.
@end defun

@c page
@node plain forms inspect
@subsection Inspecting @http{} post data


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-form-data-string @var{httppost}
Given an instance of @code{curl-form-data} extract a string representing
the current contents; if successful return the string, else return
@false{}.
@end defun
@defun curl-formget @var{httppost} @var{custom-data} @var{callback}
Invoke a @var{callback} for each line of content in @var{httppost}; when
successful return @false{}, else return @true{}.
@curlman{curl_formget}.

@var{httppost} must be an instance of @code{curl-form-data}.

@var{callabck} must be the return value of a call to
@func{make-curl-formget-callback}.

@var{custom-data} must be @false{} or a pointer object that will be used
as first argument to @var{callback}; when @false{}, the argument will be
the @cnull{} pointer.
@end defun


@defun make-curl-formget-callback @var{user-scheme-function}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as @var{callback}
argument in calls to @func{curl-formget}; the returned pointer must be
released with a call to @func{free-c-callback} from @library{vicare
ffi}.

@var{user-scheme-function} must accept @math{3} arguments:

@enumerate
@item
A copy of the argument @var{custom-data} given to @func{curl-formget}.

@item
A pointer object referencing the line of content.

@item
An exact integer, in the range of the C language type @code{size_t},
representing the number of bytes in the content.
@end enumerate

When successful @var{user-scheme-callback} must return its last
argument, the number of bytes in the content; else it must return a
different exact integer in the range of the C language type
@code{size_t}.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{user-scheme-callback} raises an exception: the raised object is
discarded and the callback returns the fixnum zero.
@end itemize
@end defun

@c page
@node plain shares
@section Shared configuration option sets


@curl{} allows us to share entities and configuration options among
through shared sets called @dfn{shares}.

@menu
* plain shares examples::       Shares examples.
* plain shares structs::        Shares data structures.
* plain shares init::           Initialisation and finalisation
                                of shares.
* plain shares opts::           Registering in shares.
* plain shares callbacks::      Preparing callback functions.
* plain shares misc::           Miscellaneous shares functions.
@end menu

@c page
@node plain shares examples
@subsection Shares examples


@example
#!r6rs
(import (vicare)
  (vicare net curl)
  (vicare net curl constants))

(define share
  (curl-share-init))

(curl-share-setopt share CURLSHOPT_SHARE CURL_LOCK_DATA_COOKIE)
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_SHARE CURL_LOCK_DATA_DNS)
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_USERDATA #f)
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_LOCKFUNC
   (make-curl-lock-function
     (lambda (easy what-to-lock how-to-lock custom-data)
       (void))))
@result{} CURLSHE_OK

(curl-share-setopt share CURLSHOPT_UNLOCKFUNC
   (make-curl-lock-function
     (lambda (easy what-to-lock custom-data)
       (void))))
@result{} CURLSHE_OK
@end example

@c page
@node plain shares structs
@subsection Shares data structures


The following bindings are exported by the library @library{vicare net
curl}.


@deftp {Struct Type} curl-share
@cindex @var{share} argument
@cindex Argument @var{share}
Opaque structure type used to reference instances of the C language type
@code{CURLSH}.

When instances of this type are used as arguments to functions: this
documentation identifies them as @var{share}.

Instances of this type must be finalised with @func{curl-share-cleanup};
whenever an instance of this type is garbage collected:
@func{curl-share-cleanup} is automatically applied to it and any error
ignored.
@end deftp


@defun curl-share? @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-share}.
@end defun


@defun curl-share?/alive @var{obj}
Return @true{} if @var{obj} is an instance of @code{curl-share} and it
has not been finalised yet.
@end defun


@defun curl-share-destructor @var{share}
@defunx set-curl-share-destructor! @var{share} @var{func}
Retrieve or set a destructor function associated to the @var{share}.

Whenever the @var{share} is finalised, either explicitly with
@func{curl-share-cleanup} or implicitly by the garbage collector,
@var{func} is applied to @var{share} before the internal state of
@var{share} is finalised.

Notice that @var{func} can do anything, not only destroy some state
associated to @var{share}; if we do:

@example
(define share ...)
(set-curl-share-destructor! share
  (let ((state (make-some-data-struct)))
    (case-lambda
      ((share)
       (destroy state))
      (()
       state))))

(let ((state ((curl-share-destructor share))))
  (do-something-with share state))
@end example

@noindent
we can easily associate values to @var{share}.
@end defun

@c page
@node plain shares init
@subsection Initialisation and finalisation of shares


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-share-init
Build a new instance of @code{curl-share} object; if successful return
the instance, else return @false{}.  @curlman{curl_share_cleaup}.
@end defun


@defun curl-share-cleanup @var{share}
Attempt to release all the resources associated to @var{share}, which
must be an instance of @code{curl-share}; if successful return
@code{CURLSHE_OK}, else return a @code{CURLSHE_} error code.
@curlman{curl_share_cleanup}.

It is safe to apply this function multiple times to the same @var{share}
object: the first time the data is finalised, the subsequent times
nothing happens.

@strong{NOTE} When this function actually finalises a @code{CURLSH}
object the registered callbacks may be called; be careful not to release
them before finalising @var{share}.
@end defun

@c page
@node plain shares opts
@subsection Registering in shares


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-share-setopt @var{share} @var{option} @var{parameter}
Set @var{option} to @var{parameter} for the given @var{share}; if
succesful return @code{CURLSHE_OK}, else return a @code{CURLSHE_} error
code.  @curlman{curl_share_setopt}.

@var{option} must be an exact integer representing a @code{CURLSHOPT_}
constant.

The type of @var{parameter} depends on @var{option}.  Whenever the
@var{option} requires a pointer value: @var{parameter} can be either a
pointer object or @false{}, which will be converted to @cnull{}.
@end defun

@c page
@node plain shares callbacks
@subsection Preparing callback functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun make-curl-lock-function @var{user-scheme-function}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as @var{parameter}
argument in calls to @func{curl-share-setopt} with @var{option} set to
@code{CURLSHOPT_LOCKFUNC}; the returned pointer must be released with a
call to @func{free-c-callback} from @library{vicare ffi}.

@var{user-scheme-function} must accept @math{4} arguments:

@enumerate
@item
A temporary instance of @code{curl-easy} @strong{not} holding ownership
for the wrapped @code{CURL} instance.

@item
An exact integer representing a @code{CURL_LOCK_DATA_} constant.

@item
An exact integer representing a @code{CURL_LOCK_ACCESS_} constant.

@item
A copy of the value registered in the associated @var{share} with the
@var{option} @code{CURLSHOPT_USERDATA}; this is @false{} or a pointer
object.
@end enumerate

@var{user-scheme-callback} can return unspecified values.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Whatever value is returned by @var{user-scheme-callback} it is discarded
and @code{(void)} is returned instead.

@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{user-scheme-callback} raises an exception: the raised object is
discarded and the callback returns @code{(void)}.
@end itemize
@end defun


@defun make-curl-unlock-function @var{user-scheme-function}
Wrap a user supplied Scheme function and return a pointer object
referencing a callback function suitable to be used as @var{parameter}
argument in calls to @func{curl-share-setopt} with @var{option} set to
@code{CURLSHOPT_UNLOCKFUNC}; the returned pointer must be released with
a call to @func{free-c-callback} from @library{vicare ffi}.

@var{user-scheme-function} must accept @math{3} arguments:

@enumerate
@item
A temporary instance of @code{curl-easy} @strong{not} holding ownership
for the wrapped @code{CURL} instance.

@item
An exact integer representing a @code{CURL_LOCK_DATA_} constant.

@item
A copy of the value registered in the associated @var{share} with the
@var{option} @code{CURLSHOPT_USERDATA}; this is @false{} or a pointer
object.
@end enumerate

@var{user-scheme-callback} can return unspecified values.

@var{user-scheme-callback} is wrapped in an internally generated Scheme
function which does the following:

@itemize
@item
Whatever value is returned by @var{user-scheme-callback} it is discarded
and @code{(void)} is returned instead.

@item
Block and discard all the raised exceptions using @func{guard} from
@library{vicare}; @var{user-scheme-callback} should take care of
handling its own exceptions.

@item
If @var{user-scheme-callback} raises an exception: the raised object is
discarded and the callback returns @code{(void)}.
@end itemize
@end defun

@c page
@node plain shares misc
@subsection Miscellaneous shares functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-share-strerror @var{errcode}
@defunx curl-share-strerror/string @var{errcode}
Given an exact integer representing a @code{CURLSHE_} error code return
an @ascii{} bytevector or string describing the associated error.
@curlman{curl_share_strerror}.
@end defun

@c page
@node plain misc
@section Miscellaneous functions


The following bindings are exported by the library @library{vicare net
curl}.


@defun curl-free @var{pointer}
Release memory allocated through a call to the @curl{} library; return
unspecified values.  @curlman{curl_free}.

@var{pointer} must be @false{} or a pointer object; when @var{pointer}
is neither @false{} nor @cnull{}: @var{pointer} is mutated to represent
the @cnull{} pointer.

It is safe to apply this function multiple times to the same
@var{pointer}.
@end defun


@defun curl-escape @var{str.data}
@defunx curl-escape @var{str.data} @var{str.len}
Obsolete function.  Escape all the characters in the input string to
make it ready to be a @aurl{} component; if successful return a
bytevector holding the @ascii{} encoding of the string, else return
@false{}.  @curlman{curl_escape}.

@var{str.data} must be a string, bytevector, pointer object or
@code{memory-block} holding the representation of an @ascii{} string.

The optional @var{str.len} must be @false{} or an exact integer, in the
range of the C language type @code{int}, representing the number of
bytes in the input string; when @false{} or not given, the length of the
string is determined with @cfunc{strlen}.  @var{str.len} is always
ignored but when @var{str.data} is a pointer object.
@end defun


@defun curl-escape/string @var{str.data}
@defunx curl-escape/string @var{str.data} @var{str.len}
Like @func{curl-escape} but return a Scheme string.
@end defun


@defun curl-unescape @var{str.data}
@defunx curl-unescape @var{str.data} @var{str.len}
Obsolete function.  Unescape all the characters in the input string as
if it comes from a @aurl{} component; if successful return a bytevector
holding the @ascii{} encoding of the string, else return @false{}.
@curlman{curl_unescape}.

@var{str.data} must be a string, bytevector, pointer object or
@code{memory-block} holding the representation of an @ascii{} string.

The optional @var{str.len} must be @false{} or an exact integer, in the
range of the C language type @code{int}, representing the number of
bytes in the input string; when @false{} or not given, the length of the
string is determined with @cfunc{strlen}.  @var{str.len} is always
ignored but when @var{str.data} is a pointer object.
@end defun


@defun curl-unescape/string @var{str.data}
@defunx curl-unescape/string @var{str.data} @var{str.len}
Like @func{curl-unescape} but return a Scheme string.
@end defun


@defun curl-getdate @var{date}
Convert a date string to the the number of seconds since the Epoch.
@curlman{curl_getdate}.

@var{str.data} must be a string, bytevector, pointer object or
@code{memory-block} holding the representation of the date as @ascii{}
string.

@example
(import (vicare)
  (vicare net curl))

(curl-getdate "Sun Nov 6 94")
@result{} 784080000
@end example
@end defun

@c page
@node plain debug
@section Debugging facilities


The following bindings are exported by the library @library{vicare net
curl}.


@deffn Parameter curl-easy-garbage-collection-log
Whenever an instance of @code{curl-easy} is garbage collected, it is
handed to a dedicated guardian.  When this parameter is set to @false{}:
nothing happens.  When this parameter is set to true, one of the
following operations are performed:

@itemize
@item
If the parameter's value is an output port: a line of text is displayed
on such port describing the operation.

@item
If the parameter's value is a procedure: the procedure itself is applied
to the @code{curl-easy} instance being finalised; the procedure should
not mutate the structure in any way.

@item
If the parameter's value is any other true value: a line of text is
displayed on the port returned by @func{current-error-port}, describing
the operation.
@end itemize
@end deffn


@deffn Parameter curl-form-data-garbage-collection-log
Whenever an instance of @code{curl-form} is garbage collected, it is
handed to a dedicated guardian.  When this parameter is set to @false{}:
nothing happens.  When this parameter is set to true, one of the
following operations are performed:

@itemize
@item
If the parameter's value is an output port: a line of text is displayed
on such port describing the operation.

@item
If the parameter's value is a procedure: the procedure itself is applied
to the @code{curl-form} instance being finalised; the procedure should
not mutate the structure in any way.

@item
If the parameter's value is any other true value: a line of text is
displayed on the port returned by @func{current-error-port}, describing
the operation.
@end itemize
@end deffn


@deffn Parameter curl-share-garbage-collection-log
Whenever an instance of @code{curl-share} is garbage collected, it is
handed to a dedicated guardian.  When this parameter is set to @false{}:
nothing happens.  When this parameter is set to true, one of the
following operations are performed:

@itemize
@item
If the parameter's value is an output port: a line of text is displayed
on such port describing the operation.

@item
If the parameter's value is a procedure: the procedure itself is applied
to the @code{curl-share} instance being finalised; the procedure should
not mutate the structure in any way.

@item
If the parameter's value is any other true value: a line of text is
displayed on the port returned by @func{current-error-port}, describing
the operation.
@end itemize
@end deffn

@c page
@c ------------------------------------------------------------
@c Appendices.
@c ------------------------------------------------------------

@include gpl-3.0.texi
@include fdl-1.3.texi

@c page
@node references
@appendix Bibliography and references


The documentation of @value{PACKAGE} is available online:

@center @url{http://marcomaggi.github.com/docs/vicare-curl.html}

@noindent
the latest version of this package can be downloaded from:

@center @url{http://github.com/marcomaggi/vicare-curl/downloads}

@noindent
development takes place at:

@center @url{http://github.com/marcomaggi/vicare-curl/}

@noindent
the home page of the Vicare project is at:

@center @url{http://marcomaggi.github.com/vicare.html}

@noindent
the home page of the Nausicaa project is at:

@center @url{http://marcomaggi.github.com/nausicaa.html}

@noindent
Curl can be found here:

@center @url{http://curl.sourceforge.net/}

@c page
@node concept index
@appendix An entry for each concept

@printindex cp

@node function index
@appendix An entry for each function.

@printindex fn

@node variable index
@appendix An entry for each variable.

@printindex vr

@node type index
@appendix An entry for each type.

@printindex tp

@contents
@bye

@c end of file

